
2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800526c  0800526c  0000626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a0  080053a0  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080053a0  080053a0  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080053a0  080053a0  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080053a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000064  0800540c  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800540c  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea66  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002578  00000000  00000000  00015af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00018070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c44  00000000  00000000  00019040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fcc  00000000  00000000  00019c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001145c  00000000  00000000  00032c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3d6  00000000  00000000  000440ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004880  00000000  00000000  000d14c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d5d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08005254 	.word	0x08005254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08005254 	.word	0x08005254

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2101      	movs	r1, #1
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <csn_high+0x14>)
 800073e:	f001 fe05 	bl	800234c <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40010800 	.word	0x40010800

0800074c <csn_low>:



void csn_low(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2101      	movs	r1, #1
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <csn_low+0x14>)
 8000756:	f001 fdf9 	bl	800234c <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010800 	.word	0x40010800

08000764 <ce_high>:

void ce_high(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800076e:	4802      	ldr	r0, [pc, #8]	@ (8000778 <ce_high+0x14>)
 8000770:	f001 fdec 	bl	800234c <HAL_GPIO_WritePin>
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40010800 	.word	0x40010800

0800077c <ce_low>:

void ce_low(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000786:	4802      	ldr	r0, [pc, #8]	@ (8000790 <ce_low+0x14>)
 8000788:	f001 fde0 	bl	800234c <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40010800 	.word	0x40010800

08000794 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80007ae:	f7ff ffcd 	bl	800074c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80007b2:	f107 010f 	add.w	r1, r7, #15
 80007b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ba:	2201      	movs	r2, #1
 80007bc:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <nrf24_w_reg+0x4c>)
 80007be:	f002 fa89 	bl	8002cd4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ca:	6839      	ldr	r1, [r7, #0]
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <nrf24_w_reg+0x4c>)
 80007ce:	f002 fa81 	bl	8002cd4 <HAL_SPI_Transmit>

	csn_high();
 80007d2:	f7ff ffaf 	bl	8000734 <csn_high>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000009c 	.word	0x2000009c

080007e4 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73bb      	strb	r3, [r7, #14]

	csn_low();
 80007fc:	f7ff ffa6 	bl	800074c <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000800:	f107 010f 	add.w	r1, r7, #15
 8000804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000808:	2201      	movs	r2, #1
 800080a:	4809      	ldr	r0, [pc, #36]	@ (8000830 <nrf24_r_reg+0x4c>)
 800080c:	f002 fa62 	bl	8002cd4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	b29a      	uxth	r2, r3
 8000814:	f107 010e 	add.w	r1, r7, #14
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <nrf24_r_reg+0x4c>)
 800081e:	f002 fb9d 	bl	8002f5c <HAL_SPI_Receive>

	csn_high();
 8000822:	f7ff ff87 	bl	8000734 <csn_high>

	return data;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000009c 	.word	0x2000009c

08000834 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800083e:	1df9      	adds	r1, r7, #7
 8000840:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000844:	2201      	movs	r2, #1
 8000846:	4803      	ldr	r0, [pc, #12]	@ (8000854 <nrf24_w_spec_cmd+0x20>)
 8000848:	f002 fa44 	bl	8002cd4 <HAL_SPI_Transmit>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000009c 	.word	0x2000009c

08000858 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000862:	2101      	movs	r1, #1
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff ffbd 	bl	80007e4 <nrf24_r_reg>
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff ff88 	bl	8000794 <nrf24_w_reg>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff ffa3 	bl	80007e4 <nrf24_r_reg>
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f023 0302 	bic.w	r3, r3, #2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	2201      	movs	r2, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff ff6e 	bl	8000794 <nrf24_w_reg>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2006      	movs	r0, #6
 80008d2:	f7ff ff87 	bl	80007e4 <nrf24_r_reg>
 80008d6:	4603      	mov	r3, r0
 80008d8:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	b25a      	sxtb	r2, r3
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 80008f8:	f107 030f 	add.w	r3, r7, #15
 80008fc:	2201      	movs	r2, #1
 80008fe:	4619      	mov	r1, r3
 8000900:	2006      	movs	r0, #6
 8000902:	f7ff ff47 	bl	8000794 <nrf24_w_reg>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 800091c:	2101      	movs	r1, #1
 800091e:	2006      	movs	r0, #6
 8000920:	f7ff ff60 	bl	80007e4 <nrf24_r_reg>
 8000924:	4603      	mov	r3, r0
 8000926:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800092e:	b2db      	uxtb	r3, r3
 8000930:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d105      	bne.n	8000944 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	b2db      	uxtb	r3, r3
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e007      	b.n	8000954 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d104      	bne.n	8000954 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	b2db      	uxtb	r3, r3
 8000952:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000954:	f107 030f 	add.w	r3, r7, #15
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	2006      	movs	r0, #6
 800095e:	f7ff ff19 	bl	8000794 <nrf24_w_reg>
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	2201      	movs	r2, #1
 8000978:	4619      	mov	r1, r3
 800097a:	2005      	movs	r0, #5
 800097c:	f7ff ff0a 	bl	8000794 <nrf24_w_reg>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <nrf24_pipe_pld_size>:

void nrf24_open_tx_pipe(uint8_t *addr){
	nrf24_w_reg(TX_ADDR, addr, 5);
}

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	4613      	mov	r3, r2
 8000996:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b20      	cmp	r3, #32
 800099c:	d901      	bls.n	80009a2 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 800099e:	2320      	movs	r3, #32
 80009a0:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	d839      	bhi.n	8000a1c <nrf24_pipe_pld_size+0x94>
 80009a8:	a201      	add	r2, pc, #4	@ (adr r2, 80009b0 <nrf24_pipe_pld_size+0x28>)
 80009aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ae:	bf00      	nop
 80009b0:	080009c9 	.word	0x080009c9
 80009b4:	080009d7 	.word	0x080009d7
 80009b8:	080009e5 	.word	0x080009e5
 80009bc:	080009f3 	.word	0x080009f3
 80009c0:	08000a01 	.word	0x08000a01
 80009c4:	08000a0f 	.word	0x08000a0f
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	2011      	movs	r0, #17
 80009d0:	f7ff fee0 	bl	8000794 <nrf24_w_reg>

		break;
 80009d4:	e022      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	2201      	movs	r2, #1
 80009da:	4619      	mov	r1, r3
 80009dc:	2012      	movs	r0, #18
 80009de:	f7ff fed9 	bl	8000794 <nrf24_w_reg>

		break;
 80009e2:	e01b      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	2013      	movs	r0, #19
 80009ec:	f7ff fed2 	bl	8000794 <nrf24_w_reg>

		break;
 80009f0:	e014      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 80009f2:	1dbb      	adds	r3, r7, #6
 80009f4:	2201      	movs	r2, #1
 80009f6:	4619      	mov	r1, r3
 80009f8:	2014      	movs	r0, #20
 80009fa:	f7ff fecb 	bl	8000794 <nrf24_w_reg>

		break;
 80009fe:	e00d      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000a00:	1dbb      	adds	r3, r7, #6
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	2015      	movs	r0, #21
 8000a08:	f7ff fec4 	bl	8000794 <nrf24_w_reg>

		break;
 8000a0c:	e006      	b.n	8000a1c <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000a0e:	1dbb      	adds	r3, r7, #6
 8000a10:	2201      	movs	r2, #1
 8000a12:	4619      	mov	r1, r3
 8000a14:	2016      	movs	r0, #22
 8000a16:	f7ff febd 	bl	8000794 <nrf24_w_reg>

		break;
 8000a1a:	bf00      	nop
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 8000a34:	2101      	movs	r1, #1
 8000a36:	2002      	movs	r0, #2
 8000a38:	f7ff fed4 	bl	80007e4 <nrf24_r_reg>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b05      	cmp	r3, #5
 8000a44:	d850      	bhi.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
 8000a46:	a201      	add	r2, pc, #4	@ (adr r2, 8000a4c <nrf24_open_rx_pipe+0x28>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000a65 	.word	0x08000a65
 8000a50:	08000a7b 	.word	0x08000a7b
 8000a54:	08000a91 	.word	0x08000a91
 8000a58:	08000aa7 	.word	0x08000aa7
 8000a5c:	08000abd 	.word	0x08000abd
 8000a60:	08000ad3 	.word	0x08000ad3
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 8000a64:	2205      	movs	r2, #5
 8000a66:	6839      	ldr	r1, [r7, #0]
 8000a68:	200a      	movs	r0, #10
 8000a6a:	f7ff fe93 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	73fb      	strb	r3, [r7, #15]
		break;
 8000a78:	e036      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	6839      	ldr	r1, [r7, #0]
 8000a7e:	200b      	movs	r0, #11
 8000a80:	f7ff fe88 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a8e:	e02b      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	6839      	ldr	r1, [r7, #0]
 8000a94:	200c      	movs	r0, #12
 8000a96:	f7ff fe7d 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
		break;
 8000aa4:	e020      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	6839      	ldr	r1, [r7, #0]
 8000aaa:	200d      	movs	r0, #13
 8000aac:	f7ff fe72 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	73fb      	strb	r3, [r7, #15]
		break;
 8000aba:	e015      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	6839      	ldr	r1, [r7, #0]
 8000ac0:	200e      	movs	r0, #14
 8000ac2:	f7ff fe67 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	73fb      	strb	r3, [r7, #15]
		break;
 8000ad0:	e00a      	b.n	8000ae8 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	6839      	ldr	r1, [r7, #0]
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f7ff fe5c 	bl	8000794 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	f043 0320 	orr.w	r3, r3, #32
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	73fb      	strb	r3, [r7, #15]
		break;
 8000ae6:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000ae8:	f107 030f 	add.w	r3, r7, #15
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	2002      	movs	r0, #2
 8000af2:	f7ff fe4f 	bl	8000794 <nrf24_w_reg>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop

08000b00 <nrf24_cls_rx_pipe>:

void nrf24_cls_rx_pipe(uint8_t pipe){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fe69 	bl	80007e4 <nrf24_r_reg>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	4013      	ands	r3, r2
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000b30:	f107 030f 	add.w	r3, r7, #15
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fe2b 	bl	8000794 <nrf24_w_reg>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	460a      	mov	r2, r1
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	4613      	mov	r3, r2
 8000b54:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8000b56:	2101      	movs	r1, #1
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fe43 	bl	80007e4 <nrf24_r_reg>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f023 030c 	bic.w	r3, r3, #12
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 8000b8c:	f107 030f 	add.w	r3, r7, #15
 8000b90:	2201      	movs	r2, #1
 8000b92:	4619      	mov	r1, r3
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fdfd 	bl	8000794 <nrf24_w_reg>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	3b02      	subs	r3, #2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f7ff fdea 	bl	8000794 <nrf24_w_reg>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	csn_low();
 8000bcc:	f7ff fdbe 	bl	800074c <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000bd0:	20e1      	movs	r0, #225	@ 0xe1
 8000bd2:	f7ff fe2f 	bl	8000834 <nrf24_w_spec_cmd>
	csn_high();
 8000bd6:	f7ff fdad 	bl	8000734 <csn_high>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
	csn_low();
 8000be2:	f7ff fdb3 	bl	800074c <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8000be6:	20e2      	movs	r0, #226	@ 0xe2
 8000be8:	f7ff fe24 	bl	8000834 <nrf24_w_spec_cmd>
	csn_high();
 8000bec:	f7ff fda2 	bl	8000734 <csn_high>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000bfe:	23ff      	movs	r3, #255	@ 0xff
 8000c00:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8000c02:	f7ff fda3 	bl	800074c <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	1db9      	adds	r1, r7, #6
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2301      	movs	r3, #1
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <nrf24_r_status+0x34>)
 8000c14:	f002 fabb 	bl	800318e <HAL_SPI_TransmitReceive>
	csn_high();
 8000c18:	f7ff fd8c 	bl	8000734 <csn_high>

	return data;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000009c 	.word	0x2000009c

08000c2c <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000c36:	f7ff ffdd 	bl	8000bf4 <nrf24_r_status>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	2007      	movs	r0, #7
 8000c50:	f7ff fda0 	bl	8000794 <nrf24_w_reg>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000c66:	f7ff ffc5 	bl	8000bf4 <nrf24_r_status>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f043 0320 	orr.w	r3, r3, #32
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f7ff fd88 	bl	8000794 <nrf24_w_reg>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8000c96:	f7ff ffad 	bl	8000bf4 <nrf24_r_status>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	2201      	movs	r2, #1
 8000cac:	4619      	mov	r1, r3
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f7ff fd70 	bl	8000794 <nrf24_w_reg>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fd8b 	bl	80007e4 <nrf24_r_reg>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fd56 	bl	8000794 <nrf24_w_reg>

	ce_high();
 8000ce8:	f7ff fd3c 	bl	8000764 <ce_high>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <nrf24_stop_listen>:

void nrf24_stop_listen(void){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fd6f 	bl	80007e4 <nrf24_r_reg>
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	2201      	movs	r2, #1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fd3a 	bl	8000794 <nrf24_w_reg>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	201d      	movs	r0, #29
 8000d36:	f7ff fd55 	bl	80007e4 <nrf24_r_reg>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d105      	bne.n	8000d50 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e004      	b.n	8000d5a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f023 0304 	bic.w	r3, r3, #4
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000d5a:	f107 030f 	add.w	r3, r7, #15
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	201d      	movs	r0, #29
 8000d64:	f7ff fd16 	bl	8000794 <nrf24_w_reg>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 8000d80:	2101      	movs	r1, #1
 8000d82:	201c      	movs	r0, #28
 8000d84:	f7ff fd2e 	bl	80007e4 <nrf24_r_reg>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d901      	bls.n	8000d96 <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 8000d92:	2305      	movs	r3, #5
 8000d94:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e00c      	b.n	8000dce <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2201      	movs	r2, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 8000dce:	f107 030f 	add.w	r3, r7, #15
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	201c      	movs	r0, #28
 8000dd8:	f7ff fcdc 	bl	8000794 <nrf24_w_reg>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	d901      	bls.n	8000dfe <nrf24_auto_ack+0x1a>
		pipe = 5;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000dfe:	2101      	movs	r1, #1
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff fcef 	bl	80007e4 <nrf24_r_reg>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8000e0a:	79bb      	ldrb	r3, [r7, #6]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00b      	beq.n	8000e28 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2201      	movs	r2, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e00c      	b.n	8000e42 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	b25a      	sxtb	r2, r3
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000e42:	f107 030f 	add.w	r3, r7, #15
 8000e46:	2201      	movs	r2, #1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff fca2 	bl	8000794 <nrf24_w_reg>
}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000e62:	2101      	movs	r1, #1
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fcbd 	bl	80007e4 <nrf24_r_reg>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <nrf24_auto_ack_all+0x22>
		enaa = 63;
 8000e74:	233f      	movs	r3, #63	@ 0x3f
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e001      	b.n	8000e7e <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000e7e:	f107 030f 	add.w	r3, r7, #15
 8000e82:	2201      	movs	r2, #1
 8000e84:	4619      	mov	r1, r3
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fc84 	bl	8000794 <nrf24_w_reg>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	201d      	movs	r0, #29
 8000ea2:	f7ff fc9f 	bl	80007e4 <nrf24_r_reg>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e004      	b.n	8000ec6 <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	f023 0302 	bic.w	r3, r3, #2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000ec6:	f107 030f 	add.w	r3, r7, #15
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	201d      	movs	r0, #29
 8000ed0:	f7ff fc60 	bl	8000794 <nrf24_w_reg>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	201d      	movs	r0, #29
 8000eea:	f7ff fc7b 	bl	80007e4 <nrf24_r_reg>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e004      	b.n	8000f0e <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f023 0301 	bic.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000f0e:	f107 030f 	add.w	r3, r7, #15
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	201d      	movs	r0, #29
 8000f18:	f7ff fc3c 	bl	8000794 <nrf24_w_reg>
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2004      	movs	r0, #4
 8000f32:	f7ff fc57 	bl	80007e4 <nrf24_r_reg>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	b25a      	sxtb	r2, r3
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000f58:	f107 030f 	add.w	r3, r7, #15
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4619      	mov	r1, r3
 8000f60:	2004      	movs	r0, #4
 8000f62:	f7ff fc17 	bl	8000794 <nrf24_w_reg>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f7ff fc32 	bl	80007e4 <nrf24_r_reg>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f023 030f 	bic.w	r3, r3, #15
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000f98:	f107 030f 	add.w	r3, r7, #15
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2004      	movs	r0, #4
 8000fa2:	f7ff fbf7 	bl	8000794 <nrf24_w_reg>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <nrf24_receive>:
	}

	return 0;
}

void nrf24_receive(uint8_t *data, uint8_t size){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 8000fbc:	2361      	movs	r3, #97	@ 0x61
 8000fbe:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000fc0:	f7ff fbc4 	bl	800074c <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000fc4:	f107 010f 	add.w	r1, r7, #15
 8000fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <nrf24_receive+0x44>)
 8000fd0:	f001 fe80 	bl	8002cd4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <nrf24_receive+0x44>)
 8000fe0:	f001 ffbc 	bl	8002f5c <HAL_SPI_Receive>
	csn_high();
 8000fe4:	f7ff fba6 	bl	8000734 <csn_high>

	nrf24_clear_rx_dr();
 8000fe8:	f7ff fe20 	bl	8000c2c <nrf24_clear_rx_dr>
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000009c 	.word	0x2000009c

08000ff8 <nrf24_defaults>:

void nrf24_defaults(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	ce_low();
 8000ffe:	f7ff fbbd 	bl	800077c <ce_low>

	nrf24_pwr_dwn();
 8001002:	f7ff fc43 	bl	800088c <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 8001006:	2003      	movs	r0, #3
 8001008:	f7ff fc5a 	bl	80008c0 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fc7e 	bl	800090e <nrf24_data_rate>
	nrf24_set_channel(2);
 8001012:	2002      	movs	r0, #2
 8001014:	f7ff fca9 	bl	800096a <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8001018:	2100      	movs	r1, #0
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff fd93 	bl	8000b46 <nrf24_set_crc>
	nrf24_set_addr_width(5);
 8001020:	2005      	movs	r0, #5
 8001022:	f7ff fdbe 	bl	8000ba2 <nrf24_set_addr_width>
	nrf24_flush_tx();
 8001026:	f7ff fdcf 	bl	8000bc8 <nrf24_flush_tx>
	nrf24_flush_rx();
 800102a:	f7ff fdd8 	bl	8000bde <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 800102e:	f7ff fdfd 	bl	8000c2c <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8001032:	f7ff fe13 	bl	8000c5c <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8001036:	f7ff fe29 	bl	8000c8c <nrf24_clear_max_rt>
	nrf24_stop_listen();
 800103a:	f7ff fe5b 	bl	8000cf4 <nrf24_stop_listen>
	nrf24_dpl(disable);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff fe72 	bl	8000d28 <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff ff25 	bl	8000e94 <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff46 	bl	8000edc <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff ff67 	bl	8000f24 <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff ff89 	bl	8000f6e <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 800105c:	2300      	movs	r3, #0
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	e015      	b.n	800108e <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fc8e 	bl	8000988 <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fd46 	bl	8000b00 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe79 	bl	8000d70 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff feae 	bl	8000de4 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3301      	adds	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d9e6      	bls.n	8001062 <nrf24_defaults+0x6a>
	}

	ce_high();
 8001094:	f7ff fb66 	bl	8000764 <ce_high>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <nrf24_init>:

void nrf24_init(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80010a4:	f7ff fbd8 	bl	8000858 <nrf24_pwr_up>

	nrf24_flush_tx();
 80010a8:	f7ff fd8e 	bl	8000bc8 <nrf24_flush_tx>
	nrf24_flush_rx();
 80010ac:	f7ff fd97 	bl	8000bde <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80010b0:	f7ff fdbc 	bl	8000c2c <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 80010b4:	f7ff fdd2 	bl	8000c5c <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 80010b8:	f7ff fde8 	bl	8000c8c <nrf24_clear_max_rt>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <nrf24_rx_mode>:

void nrf24_rx_mode(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
    uint8_t config = nrf24_r_reg(CONFIG, 1);
 80010c6:	2101      	movs	r1, #1
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fb8b 	bl	80007e4 <nrf24_r_reg>
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]

    config |= (1 << PRIM_RX);   // RX 모드 설정
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	71fb      	strb	r3, [r7, #7]
    config |= (1 << PWR_UP);    // Power up
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(CONFIG, &config, 1);
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fb51 	bl	8000794 <nrf24_w_reg>

    ce_high(); // 수신 시작
 80010f2:	f7ff fb37 	bl	8000764 <ce_high>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a2d      	ldr	r2, [pc, #180]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a27      	ldr	r2, [pc, #156]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a21      	ldr	r2, [pc, #132]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a1b      	ldr	r2, [pc, #108]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <MX_GPIO_Init+0xd0>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin_Pin|CE_Pin_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f240 1101 	movw	r1, #257	@ 0x101
 800117a:	4816      	ldr	r0, [pc, #88]	@ (80011d4 <MX_GPIO_Init+0xd4>)
 800117c:	f001 f8e6 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin_Pin CE_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin|CE_Pin_Pin;
 8001180:	f240 1301 	movw	r3, #257	@ 0x101
 8001184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2302      	movs	r3, #2
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <MX_GPIO_Init+0xd4>)
 800119a:	f000 ff53 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800119e:	2310      	movs	r3, #16
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <MX_GPIO_Init+0xd8>)
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <MX_GPIO_Init+0xd4>)
 80011b2:	f000 ff47 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	200a      	movs	r0, #10
 80011bc:	f000 ff0b 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f000 ff24 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800
 80011d8:	10310000 	.word	0x10310000

080011dc <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4619      	mov	r1, r3
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fbcc 	bl	8000988 <nrf24_pipe_pld_size>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <NormalizeADC>:

static inline float clampf(float x,float a,float b){
    return x<a?a:(x>b?b:x);
}

float NormalizeADC(int32_t delta){
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    if(abs(delta) < ADC_DEAD_ZONE){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfb8      	it	lt
 8001206:	425b      	neglt	r3, r3
 8001208:	2264      	movs	r2, #100	@ 0x64
 800120a:	4293      	cmp	r3, r2
 800120c:	da02      	bge.n	8001214 <NormalizeADC+0x1c>
        return 0.0f;
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	e00e      	b.n	8001232 <NormalizeADC+0x3a>
    } else {
        return (float)delta / (float)ADC_NEU;
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff f853 	bl	80002c0 <__aeabi_i2f>
 800121a:	4604      	mov	r4, r0
 800121c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f84d 	bl	80002c0 <__aeabi_i2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff f950 	bl	80004d0 <__aeabi_fdiv>
 8001230:	4603      	mov	r3, r0
    }
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}
	...

0800123c <ToPWMus>:

uint32_t ToPWMus(float v){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    if(v > 1.0f) v = 1.0f;
 8001244:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fa49 	bl	80006e0 <__aeabi_fcmpgt>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <ToPWMus+0x20>
 8001254:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	e008      	b.n	800126e <ToPWMus+0x32>
    else if(v < -1.0f) v = -1.0f;
 800125c:	4910      	ldr	r1, [pc, #64]	@ (80012a0 <ToPWMus+0x64>)
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fa20 	bl	80006a4 <__aeabi_fcmplt>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <ToPWMus+0x32>
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <ToPWMus+0x64>)
 800126c:	607b      	str	r3, [r7, #4]
    return (uint32_t)((v + 1.0f) * 500.0f + 1000.0f);
 800126e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7fe ff70 	bl	8000158 <__addsf3>
 8001278:	4603      	mov	r3, r0
 800127a:	490a      	ldr	r1, [pc, #40]	@ (80012a4 <ToPWMus+0x68>)
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f873 	bl	8000368 <__aeabi_fmul>
 8001282:	4603      	mov	r3, r0
 8001284:	4908      	ldr	r1, [pc, #32]	@ (80012a8 <ToPWMus+0x6c>)
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ff66 	bl	8000158 <__addsf3>
 800128c:	4603      	mov	r3, r0
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fa30 	bl	80006f4 <__aeabi_f2uiz>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	bf800000 	.word	0xbf800000
 80012a4:	43fa0000 	.word	0x43fa0000
 80012a8:	447a0000 	.word	0x447a0000

080012ac <KiwiDrive>:


void KiwiDrive(float vx, float vy, float omega){
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08b      	sub	sp, #44	@ 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
    float Rw = -ROTATION_CONST * omega;
 80012b8:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff f853 	bl	8000368 <__aeabi_fmul>
 80012c2:	4603      	mov	r3, r0
 80012c4:	61bb      	str	r3, [r7, #24]

    float Mtop = vx + Rw;
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7fe ff45 	bl	8000158 <__addsf3>
 80012ce:	4603      	mov	r3, r0
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    float Mbl = 0.866f*vy - 0.5f*vx + Rw;
 80012d2:	493a      	ldr	r1, [pc, #232]	@ (80013bc <KiwiDrive+0x110>)
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f7ff f847 	bl	8000368 <__aeabi_fmul>
 80012da:	4603      	mov	r3, r0
 80012dc:	461c      	mov	r4, r3
 80012de:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff f840 	bl	8000368 <__aeabi_fmul>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7fe ff31 	bl	8000154 <__aeabi_fsub>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4619      	mov	r1, r3
 80012f6:	69b8      	ldr	r0, [r7, #24]
 80012f8:	f7fe ff2e 	bl	8000158 <__addsf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	623b      	str	r3, [r7, #32]
    float Mbr = -0.866f*vy - 0.5f*vx + Rw;
 8001300:	492f      	ldr	r1, [pc, #188]	@ (80013c0 <KiwiDrive+0x114>)
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f7ff f830 	bl	8000368 <__aeabi_fmul>
 8001308:	4603      	mov	r3, r0
 800130a:	461c      	mov	r4, r3
 800130c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f7ff f829 	bl	8000368 <__aeabi_fmul>
 8001316:	4603      	mov	r3, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4620      	mov	r0, r4
 800131c:	f7fe ff1a 	bl	8000154 <__aeabi_fsub>
 8001320:	4603      	mov	r3, r0
 8001322:	4619      	mov	r1, r3
 8001324:	69b8      	ldr	r0, [r7, #24]
 8001326:	f7fe ff17 	bl	8000158 <__addsf3>
 800132a:	4603      	mov	r3, r0
 800132c:	61fb      	str	r3, [r7, #28]

    float maxM = fmaxf(fabsf(Mtop), fmaxf(fabsf(Mbl), fabsf(Mbr)));
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001340:	4619      	mov	r1, r3
 8001342:	4610      	mov	r0, r2
 8001344:	f003 ff56 	bl	80051f4 <fmaxf>
 8001348:	4603      	mov	r3, r0
 800134a:	4619      	mov	r1, r3
 800134c:	4620      	mov	r0, r4
 800134e:	f003 ff51 	bl	80051f4 <fmaxf>
 8001352:	6178      	str	r0, [r7, #20]
    if (maxM > 1.0f) {
 8001354:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff f9c1 	bl	80006e0 <__aeabi_fcmpgt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d011      	beq.n	8001388 <KiwiDrive+0xdc>
        Mtop /= maxM;
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001368:	f7ff f8b2 	bl	80004d0 <__aeabi_fdiv>
 800136c:	4603      	mov	r3, r0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
        Mbl  /= maxM;
 8001370:	6979      	ldr	r1, [r7, #20]
 8001372:	6a38      	ldr	r0, [r7, #32]
 8001374:	f7ff f8ac 	bl	80004d0 <__aeabi_fdiv>
 8001378:	4603      	mov	r3, r0
 800137a:	623b      	str	r3, [r7, #32]
        Mbr  /= maxM;
 800137c:	6979      	ldr	r1, [r7, #20]
 800137e:	69f8      	ldr	r0, [r7, #28]
 8001380:	f7ff f8a6 	bl	80004d0 <__aeabi_fdiv>
 8001384:	4603      	mov	r3, r0
 8001386:	61fb      	str	r3, [r7, #28]
    }

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ToPWMus(Mtop)); // PA9
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <KiwiDrive+0x118>)
 800138a:	681c      	ldr	r4, [r3, #0]
 800138c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800138e:	f7ff ff55 	bl	800123c <ToPWMus>
 8001392:	4603      	mov	r3, r0
 8001394:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ToPWMus(Mbl));  // PA10
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <KiwiDrive+0x118>)
 8001398:	681c      	ldr	r4, [r3, #0]
 800139a:	6a38      	ldr	r0, [r7, #32]
 800139c:	f7ff ff4e 	bl	800123c <ToPWMus>
 80013a0:	4603      	mov	r3, r0
 80013a2:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, ToPWMus(Mbr));  // PA11
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <KiwiDrive+0x118>)
 80013a6:	681c      	ldr	r4, [r3, #0]
 80013a8:	69f8      	ldr	r0, [r7, #28]
 80013aa:	f7ff ff47 	bl	800123c <ToPWMus>
 80013ae:	4603      	mov	r3, r0
 80013b0:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80013b2:	bf00      	nop
 80013b4:	372c      	adds	r7, #44	@ 0x2c
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	3f5db22d 	.word	0x3f5db22d
 80013c0:	bf5db22d 	.word	0xbf5db22d
 80013c4:	200000f8 	.word	0x200000f8

080013c8 <DebugUART>:

void DebugUART(uint32_t rawX, uint32_t rawY, uint32_t rawZ){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ae      	sub	sp, #184	@ 0xb8
 80013cc:	af06      	add	r7, sp, #24
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
    char buf[128];
    uint32_t pwm1 = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <DebugUART+0x74>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint32_t pwm2 = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_3);
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <DebugUART+0x74>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    uint32_t pwm3 = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_4);
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <DebugUART+0x74>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    int len = snprintf(buf, sizeof(buf),
 80013f2:	f107 0010 	add.w	r0, r7, #16
 80013f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013fa:	9304      	str	r3, [sp, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	9303      	str	r3, [sp, #12]
 8001400:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <DebugUART+0x78>)
 8001414:	2180      	movs	r1, #128	@ 0x80
 8001416:	f003 fa29 	bl	800486c <sniprintf>
 800141a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
            "RX rawX:%4lu PWM_top:%4lu | rawY:%4lu PWM_bl:%4lu | rawZ:%4lu PWM_br:%4lu\r\n",
            (unsigned long)rawX, (unsigned long)pwm1,
            (unsigned long)rawY, (unsigned long)pwm2,
            (unsigned long)rawZ, (unsigned long)pwm3);
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800141e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001422:	b29a      	uxth	r2, r3
 8001424:	f107 0110 	add.w	r1, r7, #16
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	4805      	ldr	r0, [pc, #20]	@ (8001444 <DebugUART+0x7c>)
 800142e:	f003 f848 	bl	80044c2 <HAL_UART_Transmit>
}
 8001432:	bf00      	nop
 8001434:	37a0      	adds	r7, #160	@ 0xa0
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000f8 	.word	0x200000f8
 8001440:	0800526c 	.word	0x0800526c
 8001444:	20000140 	.word	0x20000140

08001448 <nrf24_receiver_setup>:

    return us;
}

void nrf24_receiver_setup(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

    nrf24_defaults();                               //레지스터 기본값으로 리셋
 800144e:	f7ff fdd3 	bl	8000ff8 <nrf24_defaults>
    HAL_Delay(5);                                   //전원, spi안정화 대기(최소 4.5ms이상 필요)
 8001452:	2005      	movs	r0, #5
 8001454:	f000 fcc4 	bl	8001de0 <HAL_Delay>
    nrf24_stop_listen();
 8001458:	f7ff fc4c 	bl	8000cf4 <nrf24_stop_listen>

    nrf24_pwr_up();
 800145c:	f7ff f9fc 	bl	8000858 <nrf24_pwr_up>
    HAL_Delay(5);
 8001460:	2005      	movs	r0, #5
 8001462:	f000 fcbd 	bl	8001de0 <HAL_Delay>


    nrf24_set_channel(40);
 8001466:	2028      	movs	r0, #40	@ 0x28
 8001468:	f7ff fa7f 	bl	800096a <nrf24_set_channel>
                       //무선 채널 40설정
    nrf24_auto_ack_all(disable);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff fcf3 	bl	8000e58 <nrf24_auto_ack_all>
    nrf24_dpl(disable);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fc58 	bl	8000d28 <nrf24_dpl>

    nrf24_set_payload_size(6);
 8001478:	2006      	movs	r0, #6
 800147a:	f7ff feaf 	bl	80011dc <nrf24_set_payload_size>
    nrf24_rx_mode();
 800147e:	f7ff fe1f 	bl	80010c0 <nrf24_rx_mode>


    uint8_t cfg = nrf24_r_reg(CONFIG, 1);
 8001482:	2101      	movs	r1, #1
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff f9ad 	bl	80007e4 <nrf24_r_reg>
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
    cfg &= ~((1<<6) | (1<<5) | (1<<4));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001494:	b2db      	uxtb	r3, r3
 8001496:	71fb      	strb	r3, [r7, #7]
    nrf24_w_reg(CONFIG, &cfg, 1);
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	2201      	movs	r2, #1
 800149c:	4619      	mov	r1, r3
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff f978 	bl	8000794 <nrf24_w_reg>

    nrf24_open_rx_pipe(0, rx_address);
 80014a4:	4906      	ldr	r1, [pc, #24]	@ (80014c0 <nrf24_receiver_setup+0x78>)
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fabc 	bl	8000a24 <nrf24_open_rx_pipe>
    nrf24_listen();
 80014ac:	f7ff fc06 	bl	8000cbc <nrf24_listen>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <nrf24_receiver_setup+0x7c>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	615a      	str	r2, [r3, #20]
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_EXTI_Callback>:
    nrf24_clear_rx_dr();
    return true;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) {
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	2b10      	cmp	r3, #16
 80014d6:	d10a      	bne.n	80014ee <HAL_GPIO_EXTI_Callback+0x26>
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80014da:	2210      	movs	r2, #16
 80014dc:	615a      	str	r2, [r3, #20]
	        exti_hits++;            // ★ 카운트
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_GPIO_EXTI_Callback+0x34>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <HAL_GPIO_EXTI_Callback+0x34>)
 80014e6:	6013      	str	r3, [r2, #0]
	        nrf_irq_flag = 1;        // ISR은 가볍게: 플래그만 세움
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_GPIO_EXTI_Callback+0x38>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
    }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40010400 	.word	0x40010400
 80014fc:	20000080 	.word	0x20000080
 8001500:	20000084 	.word	0x20000084

08001504 <nrf24_irq_service>:

static void nrf24_irq_service(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
    nrf24_stop_listen();
 800150a:	f7ff fbf3 	bl	8000cf4 <nrf24_stop_listen>

     uint8_t st = nrf24_r_reg(STATUS, 1);
 800150e:	2101      	movs	r1, #1
 8001510:	2007      	movs	r0, #7
 8001512:	f7ff f967 	bl	80007e4 <nrf24_r_reg>
 8001516:	4603      	mov	r3, r0
 8001518:	75fb      	strb	r3, [r7, #23]

     if (st & (1<<6)) { // RX_DR
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d055      	beq.n	80015d0 <nrf24_irq_service+0xcc>
         // ★★★ while 루프를 제거하고 무조건 한 번만 읽습니다. ★★★
         uint8_t b[6];
         nrf24_receive(b, 6);
 8001524:	463b      	mov	r3, r7
 8001526:	2106      	movs	r1, #6
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fd41 	bl	8000fb0 <nrf24_receive>

         last_rawX = (uint16_t)b[0] | ((uint16_t)b[1] << 8);
 800152e:	783b      	ldrb	r3, [r7, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	787b      	ldrb	r3, [r7, #1]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	4313      	orrs	r3, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <nrf24_irq_service+0xf8>)
 800153c:	601a      	str	r2, [r3, #0]
         last_rawY = (uint16_t)b[2] | ((uint16_t)b[3] << 8);
 800153e:	78bb      	ldrb	r3, [r7, #2]
 8001540:	461a      	mov	r2, r3
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	4313      	orrs	r3, r2
 8001548:	461a      	mov	r2, r3
 800154a:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <nrf24_irq_service+0xfc>)
 800154c:	601a      	str	r2, [r3, #0]
         last_rawZ = (uint16_t)b[4] | ((uint16_t)b[5] << 8);
 800154e:	793b      	ldrb	r3, [r7, #4]
 8001550:	461a      	mov	r2, r3
 8001552:	797b      	ldrb	r3, [r7, #5]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	4313      	orrs	r3, r2
 8001558:	461a      	mov	r2, r3
 800155a:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <nrf24_irq_service+0x100>)
 800155c:	601a      	str	r2, [r3, #0]

         if (!pwm_active) PWM_StartNeutral();
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <nrf24_irq_service+0x104>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <nrf24_irq_service+0x66>
 8001566:	f000 f853 	bl	8001610 <PWM_StartNeutral>

         float vx = NormalizeADC((int32_t)last_rawX - ADC_NEU);
 800156a:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <nrf24_irq_service+0xf8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe3e 	bl	80011f8 <NormalizeADC>
 800157c:	6138      	str	r0, [r7, #16]
         float vy = NormalizeADC((int32_t)last_rawY - ADC_NEU);
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <nrf24_irq_service+0xfc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe34 	bl	80011f8 <NormalizeADC>
 8001590:	60f8      	str	r0, [r7, #12]
         float om = NormalizeADC((int32_t)last_rawZ - ADC_NEU);
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <nrf24_irq_service+0x100>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fe2a 	bl	80011f8 <NormalizeADC>
 80015a4:	60b8      	str	r0, [r7, #8]

         KiwiDrive(vx, vy, om);
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	6938      	ldr	r0, [r7, #16]
 80015ac:	f7ff fe7e 	bl	80012ac <KiwiDrive>
         last_rx_ms = HAL_GetTick();
 80015b0:	f000 fc0c 	bl	8001dcc <HAL_GetTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a15      	ldr	r2, [pc, #84]	@ (800160c <nrf24_irq_service+0x108>)
 80015b8:	6013      	str	r3, [r2, #0]

         DebugUART(last_rawX, last_rawY, last_rawZ);
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <nrf24_irq_service+0xf8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <nrf24_irq_service+0xfc>)
 80015c0:	6811      	ldr	r1, [r2, #0]
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <nrf24_irq_service+0x100>)
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fefe 	bl	80013c8 <DebugUART>

         // STATUS 클리어(IRQ 해제)
         nrf24_clear_rx_dr();
 80015cc:	f7ff fb2e 	bl	8000c2c <nrf24_clear_rx_dr>
     }

     if (st & (1<<5)) nrf24_clear_tx_ds();
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <nrf24_irq_service+0xda>
 80015da:	f7ff fb3f 	bl	8000c5c <nrf24_clear_tx_ds>
     if (st & (1<<4)) { nrf24_clear_max_rt(); nrf24_flush_tx(); }
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <nrf24_irq_service+0xec>
 80015e8:	f7ff fb50 	bl	8000c8c <nrf24_clear_max_rt>
 80015ec:	f7ff faec 	bl	8000bc8 <nrf24_flush_tx>

     nrf24_listen();
 80015f0:	f7ff fb64 	bl	8000cbc <nrf24_listen>
}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000008c 	.word	0x2000008c
 8001600:	20000090 	.word	0x20000090
 8001604:	20000094 	.word	0x20000094
 8001608:	20000098 	.word	0x20000098
 800160c:	20000088 	.word	0x20000088

08001610 <PWM_StartNeutral>:

static void PWM_StartNeutral(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    // 첫 패킷을 받기 전까지는 PWM을 시작하지 않았음.
    // 유효 패킷을 받았을 때만 시작.
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500);
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <PWM_StartNeutral+0x44>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800161c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1500);
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <PWM_StartNeutral+0x44>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001626:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1500);
 8001628:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <PWM_StartNeutral+0x44>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001630:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001632:	2104      	movs	r1, #4
 8001634:	4807      	ldr	r0, [pc, #28]	@ (8001654 <PWM_StartNeutral+0x44>)
 8001636:	f002 f905 	bl	8003844 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800163a:	2108      	movs	r1, #8
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <PWM_StartNeutral+0x44>)
 800163e:	f002 f901 	bl	8003844 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001642:	210c      	movs	r1, #12
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <PWM_StartNeutral+0x44>)
 8001646:	f002 f8fd 	bl	8003844 <HAL_TIM_PWM_Start>
    pwm_active = 1;
 800164a:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <PWM_StartNeutral+0x48>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000f8 	.word	0x200000f8
 8001658:	20000098 	.word	0x20000098

0800165c <PWM_StopAll>:

static void PWM_StopAll(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    // 핀을 완전히 조용하게: PWM 정지
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001660:	2104      	movs	r1, #4
 8001662:	4808      	ldr	r0, [pc, #32]	@ (8001684 <PWM_StopAll+0x28>)
 8001664:	f002 f990 	bl	8003988 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001668:	2108      	movs	r1, #8
 800166a:	4806      	ldr	r0, [pc, #24]	@ (8001684 <PWM_StopAll+0x28>)
 800166c:	f002 f98c 	bl	8003988 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8001670:	210c      	movs	r1, #12
 8001672:	4804      	ldr	r0, [pc, #16]	@ (8001684 <PWM_StopAll+0x28>)
 8001674:	f002 f988 	bl	8003988 <HAL_TIM_PWM_Stop>
    pwm_active = 0;
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <PWM_StopAll+0x2c>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000f8 	.word	0x200000f8
 8001688:	20000098 	.word	0x20000098

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f000 fb43 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001696:	f000 f82f 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169a:	f7ff fd31 	bl	8001100 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800169e:	f000 faa3 	bl	8001be8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80016a2:	f000 f875 	bl	8001790 <MX_SPI1_Init>
  MX_TIM1_Init();
 80016a6:	f000 f995 	bl	80019d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  nrf24_init();
 80016aa:	f7ff fcf9 	bl	80010a0 <nrf24_init>
  nrf24_receiver_setup();
 80016ae:	f7ff fecb 	bl	8001448 <nrf24_receiver_setup>

    /* USER CODE BEGIN 3 */



	  if (nrf_irq_flag) {
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <main+0x60>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <main+0x3a>
	          nrf_irq_flag = 0;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <main+0x60>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
	          nrf24_irq_service();   // 패킷이 없으면 아무 일도 안 하고 돌아옴
 80016c2:	f7ff ff1f 	bl	8001504 <nrf24_irq_service>
	  }

	  if (pwm_active) {
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <main+0x64>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00a      	beq.n	80016e4 <main+0x58>
	          uint32_t now = HAL_GetTick();
 80016ce:	f000 fb7d 	bl	8001dcc <HAL_GetTick>
 80016d2:	6078      	str	r0, [r7, #4]
	          if ((now - last_rx_ms) > RX_TIMEOUT_MS) {
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <main+0x68>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	@ 0x64
 80016de:	d901      	bls.n	80016e4 <main+0x58>
	              PWM_StopAll();  // ★ 타이머 PWM을 완전히 중지
 80016e0:	f7ff ffbc 	bl	800165c <PWM_StopAll>


	                 }

	          }
	    HAL_Delay(1);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f000 fb7b 	bl	8001de0 <HAL_Delay>
	  if (nrf_irq_flag) {
 80016ea:	e7e2      	b.n	80016b2 <main+0x26>
 80016ec:	20000084 	.word	0x20000084
 80016f0:	20000098 	.word	0x20000098
 80016f4:	20000088 	.word	0x20000088

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b090      	sub	sp, #64	@ 0x40
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	2228      	movs	r2, #40	@ 0x28
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f8e6 	bl	80048d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800171e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001728:	2301      	movs	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172c:	2302      	movs	r3, #2
 800172e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001730:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001736:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800173a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fe33 	bl	80023ac <HAL_RCC_OscConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800174c:	f000 f819 	bl	8001782 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001750:	230f      	movs	r3, #15
 8001752:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001754:	2302      	movs	r3, #2
 8001756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2102      	movs	r1, #2
 800176a:	4618      	mov	r0, r3
 800176c:	f001 f8a0 	bl	80028b0 <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001776:	f000 f804 	bl	8001782 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	3740      	adds	r7, #64	@ 0x40
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001786:	b672      	cpsid	i
}
 8001788:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

  /* User can add his own implementation to report the HAL error return state */

  while (1)
 800178a:	bf00      	nop
 800178c:	e7fd      	b.n	800178a <Error_Handler+0x8>
	...

08001790 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <MX_SPI1_Init+0x64>)
 8001796:	4a18      	ldr	r2, [pc, #96]	@ (80017f8 <MX_SPI1_Init+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <MX_SPI1_Init+0x64>)
 800179c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017c4:	2218      	movs	r2, #24
 80017c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017dc:	220a      	movs	r2, #10
 80017de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_SPI1_Init+0x64>)
 80017e2:	f001 f9f3 	bl	8002bcc <HAL_SPI_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017ec:	f7ff ffc9 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000009c 	.word	0x2000009c
 80017f8:	40013000 	.word	0x40013000

080017fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1b      	ldr	r2, [pc, #108]	@ (8001884 <HAL_SPI_MspInit+0x88>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d12f      	bne.n	800187c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181c:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_SPI_MspInit+0x8c>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_SPI_MspInit+0x8c>)
 8001822:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_SPI_MspInit+0x8c>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_SPI_MspInit+0x8c>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a13      	ldr	r2, [pc, #76]	@ (8001888 <HAL_SPI_MspInit+0x8c>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_SPI_MspInit+0x8c>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800184c:	23a0      	movs	r3, #160	@ 0xa0
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	480b      	ldr	r0, [pc, #44]	@ (800188c <HAL_SPI_MspInit+0x90>)
 8001860:	f000 fbf0 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001864:	2340      	movs	r3, #64	@ 0x40
 8001866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <HAL_SPI_MspInit+0x90>)
 8001878:	f000 fbe4 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40013000 	.word	0x40013000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_MspInit+0x5c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <HAL_MspInit+0x5c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_MspInit+0x5c>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <HAL_MspInit+0x5c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	@ (80018ec <HAL_MspInit+0x5c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <HAL_MspInit+0x5c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_MspInit+0x60>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_MspInit+0x60>)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <NMI_Handler+0x4>

080018fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <MemManage_Handler+0x4>

0800190c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <UsageFault_Handler+0x4>

0800191c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001944:	f000 fa30 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001950:	2010      	movs	r0, #16
 8001952:	f000 fd13 	bl	800237c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f002 ffac 	bl	80048e8 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <_sbrk+0x64>)
 80019ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20005000 	.word	0x20005000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	200000f4 	.word	0x200000f4
 80019c4:	200002d8 	.word	0x200002d8

080019c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b096      	sub	sp, #88	@ 0x58
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	615a      	str	r2, [r3, #20]
 8001a04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2220      	movs	r2, #32
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 ff63 	bl	80048d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a12:	4b4a      	ldr	r3, [pc, #296]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a14:	4a4a      	ldr	r2, [pc, #296]	@ (8001b40 <MX_TIM1_Init+0x16c>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001a18:	4b48      	ldr	r3, [pc, #288]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a1a:	2247      	movs	r2, #71	@ 0x47
 8001a1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b47      	ldr	r3, [pc, #284]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001a24:	4b45      	ldr	r3, [pc, #276]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a26:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001a2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b43      	ldr	r3, [pc, #268]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a32:	4b42      	ldr	r3, [pc, #264]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a3e:	483f      	ldr	r0, [pc, #252]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a40:	f001 fe59 	bl	80036f6 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a4a:	f7ff fe9a 	bl	8001782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a52:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4838      	ldr	r0, [pc, #224]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a5c:	f002 f8ba 	bl	8003bd4 <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a66:	f7ff fe8c 	bl	8001782 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a6a:	4834      	ldr	r0, [pc, #208]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a6c:	f001 fe92 	bl	8003794 <HAL_TIM_PWM_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a76:	f7ff fe84 	bl	8001782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a86:	4619      	mov	r1, r3
 8001a88:	482c      	ldr	r0, [pc, #176]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001a8a:	f002 fc1b 	bl	80042c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a94:	f7ff fe75 	bl	8001782 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a98:	2360      	movs	r3, #96	@ 0x60
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	481f      	ldr	r0, [pc, #124]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001abe:	f001 ffc7 	bl	8003a50 <HAL_TIM_PWM_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ac8:	f7ff fe5b 	bl	8001782 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4819      	ldr	r0, [pc, #100]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001ad6:	f001 ffbb 	bl	8003a50 <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001ae0:	f7ff fe4f 	bl	8001782 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae8:	220c      	movs	r2, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	4813      	ldr	r0, [pc, #76]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001aee:	f001 ffaf 	bl	8003a50 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001af8:	f7ff fe43 	bl	8001782 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4807      	ldr	r0, [pc, #28]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001b20:	f002 fc2e 	bl	8004380 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001b2a:	f7ff fe2a 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b2e:	4803      	ldr	r0, [pc, #12]	@ (8001b3c <MX_TIM1_Init+0x168>)
 8001b30:	f000 f826 	bl	8001b80 <HAL_TIM_MspPostInit>

}
 8001b34:	bf00      	nop
 8001b36:	3758      	adds	r7, #88	@ 0x58
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200000f8 	.word	0x200000f8
 8001b40:	40012c00 	.word	0x40012c00

08001b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a09      	ldr	r2, [pc, #36]	@ (8001b78 <HAL_TIM_Base_MspInit+0x34>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10b      	bne.n	8001b6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_TIM_Base_MspInit+0x38>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <HAL_TIM_Base_MspInit+0x38>)
 8001b5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b60:	6193      	str	r3, [r2, #24]
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_TIM_Base_MspInit+0x38>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40012c00 	.word	0x40012c00
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <HAL_TIM_MspPostInit+0x5c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d118      	bne.n	8001bd2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_TIM_MspPostInit+0x60>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	@ (8001be0 <HAL_TIM_MspPostInit+0x60>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_TIM_MspPostInit+0x60>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001bb8:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <HAL_TIM_MspPostInit+0x64>)
 8001bce:	f000 fa39 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40012c00 	.word	0x40012c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010800 	.word	0x40010800

08001be8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <MX_USART2_UART_Init+0x50>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c20:	f002 fbff 	bl	8004422 <HAL_UART_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2a:	f7ff fdaa 	bl	8001782 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000140 	.word	0x20000140
 8001c38:	40004400 	.word	0x40004400

08001c3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d12f      	bne.n	8001cbc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c66:	61d3      	str	r3, [r2, #28]
 8001c68:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a13      	ldr	r2, [pc, #76]	@ (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <HAL_UART_MspInit+0x90>)
 8001ca0:	f000 f9d0 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <HAL_UART_MspInit+0x90>)
 8001cb8:	f000 f9c4 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff fe7a 	bl	80019c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cd6:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cec:	4c09      	ldr	r4, [pc, #36]	@ (8001d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f002 fdfb 	bl	80048f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfe:	f7ff fcc5 	bl	800168c <main>
  bx lr
 8001d02:	4770      	bx	lr
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001d0c:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8001d10:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001d14:	200002d4 	.word	0x200002d4

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f947 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fdaa 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f95f 	bl	800202a <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f927 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	@ (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000010 	.word	0x20000010
 8001da4:	2000000c 	.word	0x2000000c

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000010 	.word	0x20000010
 8001dc8:	20000188 	.word	0x20000188

08001dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	@ (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000188 	.word	0x20000188

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffe0 	bl	8001dcc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000010 	.word	0x20000010

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4906      	ldr	r1, [pc, #24]	@ (8001ec0 <__NVIC_EnableIRQ+0x34>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	@ (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	@ (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff90 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff2d 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff42 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff90 	bl	8001f18 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5f 	bl	8001ec4 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff35 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	@ 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e169      	b.n	800232c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002058:	2201      	movs	r2, #1
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8158 	bne.w	8002326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a9a      	ldr	r2, [pc, #616]	@ (80022e4 <HAL_GPIO_Init+0x2a0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002080:	4a98      	ldr	r2, [pc, #608]	@ (80022e4 <HAL_GPIO_Init+0x2a0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d875      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002086:	4a98      	ldr	r2, [pc, #608]	@ (80022e8 <HAL_GPIO_Init+0x2a4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d058      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 800208c:	4a96      	ldr	r2, [pc, #600]	@ (80022e8 <HAL_GPIO_Init+0x2a4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d86f      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 8002092:	4a96      	ldr	r2, [pc, #600]	@ (80022ec <HAL_GPIO_Init+0x2a8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d052      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 8002098:	4a94      	ldr	r2, [pc, #592]	@ (80022ec <HAL_GPIO_Init+0x2a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d869      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 800209e:	4a94      	ldr	r2, [pc, #592]	@ (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d04c      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020a4:	4a92      	ldr	r2, [pc, #584]	@ (80022f0 <HAL_GPIO_Init+0x2ac>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d863      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020aa:	4a92      	ldr	r2, [pc, #584]	@ (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d046      	beq.n	800213e <HAL_GPIO_Init+0xfa>
 80020b0:	4a90      	ldr	r2, [pc, #576]	@ (80022f4 <HAL_GPIO_Init+0x2b0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d85d      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d82a      	bhi.n	8002110 <HAL_GPIO_Init+0xcc>
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d859      	bhi.n	8002172 <HAL_GPIO_Init+0x12e>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <HAL_GPIO_Init+0x80>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	0800213f 	.word	0x0800213f
 80020c8:	08002119 	.word	0x08002119
 80020cc:	0800212b 	.word	0x0800212b
 80020d0:	0800216d 	.word	0x0800216d
 80020d4:	08002173 	.word	0x08002173
 80020d8:	08002173 	.word	0x08002173
 80020dc:	08002173 	.word	0x08002173
 80020e0:	08002173 	.word	0x08002173
 80020e4:	08002173 	.word	0x08002173
 80020e8:	08002173 	.word	0x08002173
 80020ec:	08002173 	.word	0x08002173
 80020f0:	08002173 	.word	0x08002173
 80020f4:	08002173 	.word	0x08002173
 80020f8:	08002173 	.word	0x08002173
 80020fc:	08002173 	.word	0x08002173
 8002100:	08002173 	.word	0x08002173
 8002104:	08002173 	.word	0x08002173
 8002108:	08002121 	.word	0x08002121
 800210c:	08002135 	.word	0x08002135
 8002110:	4a79      	ldr	r2, [pc, #484]	@ (80022f8 <HAL_GPIO_Init+0x2b4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002116:	e02c      	b.n	8002172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e029      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	3304      	adds	r3, #4
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e024      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	3308      	adds	r3, #8
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e01f      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	330c      	adds	r3, #12
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e01a      	b.n	8002174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002146:	2304      	movs	r3, #4
 8002148:	623b      	str	r3, [r7, #32]
          break;
 800214a:	e013      	b.n	8002174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	611a      	str	r2, [r3, #16]
          break;
 800215e:	e009      	b.n	8002174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	615a      	str	r2, [r3, #20]
          break;
 800216a:	e003      	b.n	8002174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x130>
          break;
 8002172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	@ 0xff
 8002178:	d801      	bhi.n	800217e <HAL_GPIO_Init+0x13a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_Init+0x13e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	@ 0xff
 8002188:	d802      	bhi.n	8002190 <HAL_GPIO_Init+0x14c>
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x152>
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	3b08      	subs	r3, #8
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	210f      	movs	r1, #15
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	6a39      	ldr	r1, [r7, #32]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80b1 	beq.w	8002326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c4:	4b4d      	ldr	r3, [pc, #308]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b4a      	ldr	r3, [pc, #296]	@ (80022fc <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021dc:	4a48      	ldr	r2, [pc, #288]	@ (8002300 <HAL_GPIO_Init+0x2bc>)
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a40      	ldr	r2, [pc, #256]	@ (8002304 <HAL_GPIO_Init+0x2c0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_GPIO_Init+0x1ec>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3f      	ldr	r2, [pc, #252]	@ (8002308 <HAL_GPIO_Init+0x2c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00d      	beq.n	800222c <HAL_GPIO_Init+0x1e8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3e      	ldr	r2, [pc, #248]	@ (800230c <HAL_GPIO_Init+0x2c8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x1e4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	@ (8002310 <HAL_GPIO_Init+0x2cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_GPIO_Init+0x1e0>
 8002220:	2303      	movs	r3, #3
 8002222:	e006      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002224:	2304      	movs	r3, #4
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002228:	2302      	movs	r3, #2
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x1ee>
 8002230:	2300      	movs	r3, #0
 8002232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002242:	492f      	ldr	r1, [pc, #188]	@ (8002300 <HAL_GPIO_Init+0x2bc>)
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800225c:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	492c      	ldr	r1, [pc, #176]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	4928      	ldr	r1, [pc, #160]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002274:	4013      	ands	r3, r2
 8002276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4922      	ldr	r1, [pc, #136]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002292:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	491e      	ldr	r1, [pc, #120]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4918      	ldr	r1, [pc, #96]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4914      	ldr	r1, [pc, #80]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d021      	beq.n	8002318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	490e      	ldr	r1, [pc, #56]	@ (8002314 <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e021      	b.n	8002326 <HAL_GPIO_Init+0x2e2>
 80022e2:	bf00      	nop
 80022e4:	10320000 	.word	0x10320000
 80022e8:	10310000 	.word	0x10310000
 80022ec:	10220000 	.word	0x10220000
 80022f0:	10210000 	.word	0x10210000
 80022f4:	10120000 	.word	0x10120000
 80022f8:	10110000 	.word	0x10110000
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	40010800 	.word	0x40010800
 8002308:	40010c00 	.word	0x40010c00
 800230c:	40011000 	.word	0x40011000
 8002310:	40011400 	.word	0x40011400
 8002314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_GPIO_Init+0x304>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	43db      	mvns	r3, r3
 8002320:	4909      	ldr	r1, [pc, #36]	@ (8002348 <HAL_GPIO_Init+0x304>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	3301      	adds	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	f47f ae8e 	bne.w	8002058 <HAL_GPIO_Init+0x14>
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	372c      	adds	r7, #44	@ 0x2c
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002392:	4a05      	ldr	r2, [pc, #20]	@ (80023a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f894 	bl	80014c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e272      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8087 	beq.w	80024da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023cc:	4b92      	ldr	r3, [pc, #584]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d00c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
 80023e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f0:	d10b      	bne.n	800240a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f2:	4b89      	ldr	r3, [pc, #548]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x12c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d168      	bne.n	80024d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e24c      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x76>
 8002414:	4b80      	ldr	r3, [pc, #512]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7f      	ldr	r2, [pc, #508]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e02e      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x98>
 800242a:	4b7b      	ldr	r3, [pc, #492]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7a      	ldr	r2, [pc, #488]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b78      	ldr	r3, [pc, #480]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a77      	ldr	r2, [pc, #476]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0xbc>
 800244e:	4b72      	ldr	r3, [pc, #456]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a71      	ldr	r2, [pc, #452]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xd4>
 8002468:	4b6b      	ldr	r3, [pc, #428]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6a      	ldr	r2, [pc, #424]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b68      	ldr	r3, [pc, #416]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a67      	ldr	r2, [pc, #412]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800247e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fca0 	bl	8001dcc <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fc9c 	bl	8001dcc <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	@ 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e200      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xe4>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc8c 	bl	8001dcc <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fc88 	bl	8001dcc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	@ 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1ec      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b53      	ldr	r3, [pc, #332]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x10c>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024f2:	4b49      	ldr	r3, [pc, #292]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x18c>
 80024fe:	4b46      	ldr	r3, [pc, #280]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b43      	ldr	r3, [pc, #268]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x176>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1c0      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3d      	ldr	r3, [pc, #244]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4939      	ldr	r1, [pc, #228]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b36      	ldr	r3, [pc, #216]	@ (800261c <HAL_RCC_OscConfig+0x270>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff fc41 	bl	8001dcc <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff fc3d 	bl	8001dcc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1a1      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b2a      	ldr	r3, [pc, #168]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4927      	ldr	r1, [pc, #156]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b26      	ldr	r3, [pc, #152]	@ (800261c <HAL_RCC_OscConfig+0x270>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fc20 	bl	8001dcc <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002590:	f7ff fc1c 	bl	8001dcc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e180      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d03a      	beq.n	8002630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d019      	beq.n	80025f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <HAL_RCC_OscConfig+0x274>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c8:	f7ff fc00 	bl	8001dcc <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff fbfc 	bl	8001dcc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e160      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f000 face 	bl	8002b90 <RCC_Delay>
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <HAL_RCC_OscConfig+0x274>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7ff fbe6 	bl	8001dcc <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002602:	e00f      	b.n	8002624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7ff fbe2 	bl	8001dcc <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d908      	bls.n	8002624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e146      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	42420000 	.word	0x42420000
 8002620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b92      	ldr	r3, [pc, #584]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e9      	bne.n	8002604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a6 	beq.w	800278a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b8b      	ldr	r3, [pc, #556]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10d      	bne.n	800266a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	4b88      	ldr	r3, [pc, #544]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a87      	ldr	r2, [pc, #540]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002658:	61d3      	str	r3, [r2, #28]
 800265a:	4b85      	ldr	r3, [pc, #532]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	4b82      	ldr	r3, [pc, #520]	@ (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002676:	4b7f      	ldr	r3, [pc, #508]	@ (8002874 <HAL_RCC_OscConfig+0x4c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a7e      	ldr	r2, [pc, #504]	@ (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7ff fba3 	bl	8001dcc <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7ff fb9f 	bl	8001dcc <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	@ 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e103      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b75      	ldr	r3, [pc, #468]	@ (8002874 <HAL_RCC_OscConfig+0x4c8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x312>
 80026b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e02d      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x334>
 80026c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4a69      	ldr	r2, [pc, #420]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6213      	str	r3, [r2, #32]
 80026d2:	4b67      	ldr	r3, [pc, #412]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a66      	ldr	r2, [pc, #408]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	e01c      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x356>
 80026e8:	4b61      	ldr	r3, [pc, #388]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a60      	ldr	r2, [pc, #384]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x36e>
 8002702:	4b5b      	ldr	r3, [pc, #364]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a5a      	ldr	r2, [pc, #360]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	4b58      	ldr	r3, [pc, #352]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a57      	ldr	r2, [pc, #348]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d015      	beq.n	800274e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff fb53 	bl	8001dcc <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff fb4f 	bl	8001dcc <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0b1      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	4b4b      	ldr	r3, [pc, #300]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ee      	beq.n	800272a <HAL_RCC_OscConfig+0x37e>
 800274c:	e014      	b.n	8002778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7ff fb3d 	bl	8001dcc <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7ff fb39 	bl	8001dcc <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e09b      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	4b40      	ldr	r3, [pc, #256]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b3c      	ldr	r3, [pc, #240]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a3b      	ldr	r2, [pc, #236]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8087 	beq.w	80028a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002794:	4b36      	ldr	r3, [pc, #216]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d061      	beq.n	8002864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d146      	bne.n	8002836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <HAL_RCC_OscConfig+0x4cc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff fb0d 	bl	8001dcc <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff fb09 	bl	8001dcc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e06d      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	4b29      	ldr	r3, [pc, #164]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027de:	4b24      	ldr	r3, [pc, #144]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	4921      	ldr	r1, [pc, #132]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a19      	ldr	r1, [r3, #32]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	430b      	orrs	r3, r1
 8002802:	491b      	ldr	r1, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCC_OscConfig+0x4cc>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7ff fadd 	bl	8001dcc <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7ff fad9 	bl	8001dcc <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e03d      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x46a>
 8002834:	e035      	b.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <HAL_RCC_OscConfig+0x4cc>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff fac6 	bl	8001dcc <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff fac2 	bl	8001dcc <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e026      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x498>
 8002862:	e01e      	b.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e019      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_RCC_OscConfig+0x500>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	429a      	cmp	r2, r3
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d001      	beq.n	80028a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0d0      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d910      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b67      	ldr	r3, [pc, #412]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	4965      	ldr	r1, [pc, #404]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b63      	ldr	r3, [pc, #396]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0b8      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800290c:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a58      	ldr	r2, [pc, #352]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002916:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002924:	4b53      	ldr	r3, [pc, #332]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a52      	ldr	r2, [pc, #328]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800292e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b50      	ldr	r3, [pc, #320]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	494d      	ldr	r1, [pc, #308]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d040      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d115      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e07f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e073      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298e:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4936      	ldr	r1, [pc, #216]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7ff fa14 	bl	8001dcc <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7ff fa10 	bl	8001dcc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e053      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d0:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d210      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4922      	ldr	r1, [pc, #136]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e032      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4916      	ldr	r1, [pc, #88]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a2a:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	490e      	ldr	r1, [pc, #56]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a3e:	f000 f821 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	490a      	ldr	r1, [pc, #40]	@ (8002a78 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	5ccb      	ldrb	r3, [r1, r3]
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	4a09      	ldr	r2, [pc, #36]	@ (8002a7c <HAL_RCC_ClockConfig+0x1cc>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <HAL_RCC_ClockConfig+0x1d0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f972 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08005340 	.word	0x08005340
 8002a7c:	20000008 	.word	0x20000008
 8002a80:	2000000c 	.word	0x2000000c

08002a84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x30>
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x36>
 8002ab2:	e027      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ab6:	613b      	str	r3, [r7, #16]
      break;
 8002ab8:	e027      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	0c9b      	lsrs	r3, r3, #18
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	4a17      	ldr	r2, [pc, #92]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ad2:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0c5b      	lsrs	r3, r3, #17
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae6:	fb03 f202 	mul.w	r2, r3, r2
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e004      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	613b      	str	r3, [r7, #16]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b06:	613b      	str	r3, [r7, #16]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	693b      	ldr	r3, [r7, #16]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	007a1200 	.word	0x007a1200
 8002b20:	08005358 	.word	0x08005358
 8002b24:	08005368 	.word	0x08005368
 8002b28:	003d0900 	.word	0x003d0900

08002b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b30:	4b02      	ldr	r3, [pc, #8]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	20000008 	.word	0x20000008

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff2 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	@ (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08005350 	.word	0x08005350

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffde 	bl	8002b2c <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0adb      	lsrs	r3, r3, #11
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	@ (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08005350 	.word	0x08005350

08002b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <RCC_Delay+0x34>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <RCC_Delay+0x38>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	0a5b      	lsrs	r3, r3, #9
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bac:	bf00      	nop
  }
  while (Delay --);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1e5a      	subs	r2, r3, #1
 8002bb2:	60fa      	str	r2, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f9      	bne.n	8002bac <RCC_Delay+0x1c>
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	20000008 	.word	0x20000008
 8002bc8:	10624dd3 	.word	0x10624dd3

08002bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e076      	b.n	8002ccc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d108      	bne.n	8002bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bee:	d009      	beq.n	8002c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
 8002bf6:	e005      	b.n	8002c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fdec 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c88:	ea42 0103 	orr.w	r1, r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	0c1a      	lsrs	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f002 0204 	and.w	r2, r2, #4
 8002caa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce4:	f7ff f872 	bl	8001dcc <HAL_GetTick>
 8002ce8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e12a      	b.n	8002f54 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_Transmit+0x36>
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e122      	b.n	8002f54 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_Transmit+0x48>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e11b      	b.n	8002f54 <HAL_SPI_Transmit+0x280>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2203      	movs	r2, #3
 8002d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	88fa      	ldrh	r2, [r7, #6]
 8002d3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	88fa      	ldrh	r2, [r7, #6]
 8002d42:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d6a:	d10f      	bne.n	8002d8c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d96:	2b40      	cmp	r3, #64	@ 0x40
 8002d98:	d007      	beq.n	8002daa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002db2:	d152      	bne.n	8002e5a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_SPI_Transmit+0xee>
 8002dbc:	8b7b      	ldrh	r3, [r7, #26]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d145      	bne.n	8002e4e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	1c9a      	adds	r2, r3, #2
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002de6:	e032      	b.n	8002e4e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d112      	bne.n	8002e1c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	881a      	ldrh	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	1c9a      	adds	r2, r3, #2
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e1a:	e018      	b.n	8002e4e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e1c:	f7fe ffd6 	bl	8001dcc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d803      	bhi.n	8002e34 <HAL_SPI_Transmit+0x160>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d102      	bne.n	8002e3a <HAL_SPI_Transmit+0x166>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e082      	b.n	8002f54 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1c7      	bne.n	8002de8 <HAL_SPI_Transmit+0x114>
 8002e58:	e053      	b.n	8002f02 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Transmit+0x194>
 8002e62:	8b7b      	ldrh	r3, [r7, #26]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d147      	bne.n	8002ef8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e8e:	e033      	b.n	8002ef8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d113      	bne.n	8002ec6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ec4:	e018      	b.n	8002ef8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec6:	f7fe ff81 	bl	8001dcc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d803      	bhi.n	8002ede <HAL_SPI_Transmit+0x20a>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d102      	bne.n	8002ee4 <HAL_SPI_Transmit+0x210>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e02d      	b.n	8002f54 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1c6      	bne.n	8002e90 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	6839      	ldr	r1, [r7, #0]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fbc4 	bl	8003694 <SPI_EndRxTxTransaction>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
  }
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d001      	beq.n	8002f7c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e104      	b.n	8003186 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f84:	d112      	bne.n	8002fac <HAL_SPI_Receive+0x50>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10e      	bne.n	8002fac <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2204      	movs	r2, #4
 8002f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8f3 	bl	800318e <HAL_SPI_TransmitReceive>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	e0ec      	b.n	8003186 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fac:	f7fe ff0e 	bl	8001dcc <HAL_GetTick>
 8002fb0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Receive+0x62>
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0e1      	b.n	8003186 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_SPI_Receive+0x74>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e0da      	b.n	8003186 <HAL_SPI_Receive+0x22a>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2204      	movs	r2, #4
 8002fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800301e:	d10f      	bne.n	8003040 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800302e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304a:	2b40      	cmp	r3, #64	@ 0x40
 800304c:	d007      	beq.n	800305e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d170      	bne.n	8003148 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003066:	e035      	b.n	80030d4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d115      	bne.n	80030a2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f103 020c 	add.w	r2, r3, #12
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030a0:	e018      	b.n	80030d4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a2:	f7fe fe93 	bl	8001dcc <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d803      	bhi.n	80030ba <HAL_SPI_Receive+0x15e>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d102      	bne.n	80030c0 <HAL_SPI_Receive+0x164>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e058      	b.n	8003186 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1c4      	bne.n	8003068 <HAL_SPI_Receive+0x10c>
 80030de:	e038      	b.n	8003152 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d113      	bne.n	8003116 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	b292      	uxth	r2, r2
 80030fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	1c9a      	adds	r2, r3, #2
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003114:	e018      	b.n	8003148 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003116:	f7fe fe59 	bl	8001dcc <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d803      	bhi.n	800312e <HAL_SPI_Receive+0x1d2>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d102      	bne.n	8003134 <HAL_SPI_Receive+0x1d8>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e01e      	b.n	8003186 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1c6      	bne.n	80030e0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fa4a 	bl	80035f0 <SPI_EndRxTransaction>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003184:	2300      	movs	r3, #0
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b08a      	sub	sp, #40	@ 0x28
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800319c:	2301      	movs	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a0:	f7fe fe14 	bl	8001dcc <HAL_GetTick>
 80031a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031b8:	7ffb      	ldrb	r3, [r7, #31]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d00c      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x4a>
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031c4:	d106      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x46>
 80031ce:	7ffb      	ldrb	r3, [r7, #31]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d001      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
 80031d6:	e17f      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_SPI_TransmitReceive+0x5c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_SPI_TransmitReceive+0x5c>
 80031e4:	887b      	ldrh	r3, [r7, #2]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e174      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x6e>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e16d      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x34a>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b04      	cmp	r3, #4
 800320e:	d003      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2205      	movs	r2, #5
 8003214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	887a      	ldrh	r2, [r7, #2]
 800322e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	d007      	beq.n	800326c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003274:	d17e      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_SPI_TransmitReceive+0xf6>
 800327e:	8afb      	ldrh	r3, [r7, #22]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d16c      	bne.n	800335e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	1c9a      	adds	r2, r3, #2
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a8:	e059      	b.n	800335e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d11b      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x162>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_SPI_TransmitReceive+0x162>
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d113      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d119      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x1a4>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d014      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003312:	b292      	uxth	r2, r2
 8003314:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331a:	1c9a      	adds	r2, r3, #2
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800332e:	2301      	movs	r3, #1
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003332:	f7fe fd4b 	bl	8001dcc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800333e:	429a      	cmp	r2, r3
 8003340:	d80d      	bhi.n	800335e <HAL_SPI_TransmitReceive+0x1d0>
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d009      	beq.n	800335e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0bc      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1a0      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x11c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d19b      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x11c>
 8003372:	e082      	b.n	800347a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_SPI_TransmitReceive+0x1f4>
 800337c:	8afb      	ldrh	r3, [r7, #22]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d171      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a8:	e05d      	b.n	8003466 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d11c      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x264>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d017      	beq.n	80033f2 <HAL_SPI_TransmitReceive+0x264>
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d114      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d119      	bne.n	8003434 <HAL_SPI_TransmitReceive+0x2a6>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d014      	beq.n	8003434 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003430:	2301      	movs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003434:	f7fe fcca 	bl	8001dcc <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003440:	429a      	cmp	r2, r3
 8003442:	d803      	bhi.n	800344c <HAL_SPI_TransmitReceive+0x2be>
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d102      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x2c4>
 800344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e038      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d19c      	bne.n	80033aa <HAL_SPI_TransmitReceive+0x21c>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d197      	bne.n	80033aa <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800347a:	6a3a      	ldr	r2, [r7, #32]
 800347c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f908 	bl	8003694 <SPI_EndRxTxTransaction>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e01d      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80034d6:	2300      	movs	r3, #0
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3728      	adds	r7, #40	@ 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034f0:	f7fe fc6c 	bl	8001dcc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4413      	add	r3, r2
 80034fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003500:	f7fe fc64 	bl	8001dcc <HAL_GetTick>
 8003504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003506:	4b39      	ldr	r3, [pc, #228]	@ (80035ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	015b      	lsls	r3, r3, #5
 800350c:	0d1b      	lsrs	r3, r3, #20
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003516:	e054      	b.n	80035c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d050      	beq.n	80035c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003520:	f7fe fc54 	bl	8001dcc <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	429a      	cmp	r2, r3
 800352e:	d902      	bls.n	8003536 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d13d      	bne.n	80035b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800354e:	d111      	bne.n	8003574 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003558:	d004      	beq.n	8003564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003562:	d107      	bne.n	8003574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357c:	d10f      	bne.n	800359e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800359c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e017      	b.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3b01      	subs	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d19b      	bne.n	8003518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000008 	.word	0x20000008

080035f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003604:	d111      	bne.n	800362a <SPI_EndRxTransaction+0x3a>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800360e:	d004      	beq.n	800361a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003618:	d107      	bne.n	800362a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003628:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003632:	d117      	bne.n	8003664 <SPI_EndRxTransaction+0x74>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363c:	d112      	bne.n	8003664 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	2101      	movs	r1, #1
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff ff49 	bl	80034e0 <SPI_WaitFlagStateUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01a      	beq.n	800368a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e013      	b.n	800368c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2200      	movs	r2, #0
 800366c:	2180      	movs	r1, #128	@ 0x80
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff ff36 	bl	80034e0 <SPI_WaitFlagStateUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e000      	b.n	800368c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2201      	movs	r2, #1
 80036a8:	2102      	movs	r1, #2
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff ff18 	bl	80034e0 <SPI_WaitFlagStateUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e013      	b.n	80036ee <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff ff05 	bl	80034e0 <SPI_WaitFlagStateUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e000      	b.n	80036ee <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e041      	b.n	800378c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fe fa11 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	4619      	mov	r1, r3
 8003734:	4610      	mov	r0, r2
 8003736:	f000 fb15 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e041      	b.n	800382a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f839 	bl	8003832 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f000 fac6 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_TIM_PWM_Start+0x24>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e022      	b.n	80038ae <HAL_TIM_PWM_Start+0x6a>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d109      	bne.n	8003882 <HAL_TIM_PWM_Start+0x3e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e015      	b.n	80038ae <HAL_TIM_PWM_Start+0x6a>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d109      	bne.n	800389c <HAL_TIM_PWM_Start+0x58>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e008      	b.n	80038ae <HAL_TIM_PWM_Start+0x6a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e05e      	b.n	8003974 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x82>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038c4:	e013      	b.n	80038ee <HAL_TIM_PWM_Start+0xaa>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_PWM_Start+0x92>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038d4:	e00b      	b.n	80038ee <HAL_TIM_PWM_Start+0xaa>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Start+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038e4:	e003      	b.n	80038ee <HAL_TIM_PWM_Start+0xaa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2201      	movs	r2, #1
 80038f4:	6839      	ldr	r1, [r7, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fcc0 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1e      	ldr	r2, [pc, #120]	@ (800397c <HAL_TIM_PWM_Start+0x138>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d107      	bne.n	8003916 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a18      	ldr	r2, [pc, #96]	@ (800397c <HAL_TIM_PWM_Start+0x138>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00e      	beq.n	800393e <HAL_TIM_PWM_Start+0xfa>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003928:	d009      	beq.n	800393e <HAL_TIM_PWM_Start+0xfa>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a14      	ldr	r2, [pc, #80]	@ (8003980 <HAL_TIM_PWM_Start+0x13c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_TIM_PWM_Start+0xfa>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a12      	ldr	r2, [pc, #72]	@ (8003984 <HAL_TIM_PWM_Start+0x140>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d111      	bne.n	8003962 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b06      	cmp	r3, #6
 800394e:	d010      	beq.n	8003972 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003960:	e007      	b.n	8003972 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800

08003988 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fc6e 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a29      	ldr	r2, [pc, #164]	@ (8003a4c <HAL_TIM_PWM_Stop+0xc4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d117      	bne.n	80039da <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <HAL_TIM_PWM_Stop+0x52>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	f240 4344 	movw	r3, #1092	@ 0x444
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d107      	bne.n	80039da <HAL_TIM_PWM_Stop+0x52>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_TIM_PWM_Stop+0x82>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1a      	ldr	r2, [r3, #32]
 80039f0:	f240 4344 	movw	r3, #1092	@ 0x444
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_PWM_Stop+0x82>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Stop+0x92>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a18:	e013      	b.n	8003a42 <HAL_TIM_PWM_Stop+0xba>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_PWM_Stop+0xa2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a28:	e00b      	b.n	8003a42 <HAL_TIM_PWM_Stop+0xba>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d104      	bne.n	8003a3a <HAL_TIM_PWM_Stop+0xb2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a38:	e003      	b.n	8003a42 <HAL_TIM_PWM_Stop+0xba>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40012c00 	.word	0x40012c00

08003a50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0ae      	b.n	8003bcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	f200 809f 	bhi.w	8003bbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003bbd 	.word	0x08003bbd
 8003a8c:	08003bbd 	.word	0x08003bbd
 8003a90:	08003bbd 	.word	0x08003bbd
 8003a94:	08003af9 	.word	0x08003af9
 8003a98:	08003bbd 	.word	0x08003bbd
 8003a9c:	08003bbd 	.word	0x08003bbd
 8003aa0:	08003bbd 	.word	0x08003bbd
 8003aa4:	08003b3b 	.word	0x08003b3b
 8003aa8:	08003bbd 	.word	0x08003bbd
 8003aac:	08003bbd 	.word	0x08003bbd
 8003ab0:	08003bbd 	.word	0x08003bbd
 8003ab4:	08003b7b 	.word	0x08003b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f9be 	bl	8003e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0208 	orr.w	r2, r2, #8
 8003ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0204 	bic.w	r2, r2, #4
 8003ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]
      break;
 8003af6:	e064      	b.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fa04 	bl	8003f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6999      	ldr	r1, [r3, #24]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	021a      	lsls	r2, r3, #8
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	619a      	str	r2, [r3, #24]
      break;
 8003b38:	e043      	b.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fa4d 	bl	8003fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0208 	orr.w	r2, r2, #8
 8003b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0204 	bic.w	r2, r2, #4
 8003b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69d9      	ldr	r1, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	61da      	str	r2, [r3, #28]
      break;
 8003b78:	e023      	b.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fa97 	bl	80040b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69d9      	ldr	r1, [r3, #28]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	021a      	lsls	r2, r3, #8
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	61da      	str	r2, [r3, #28]
      break;
 8003bba:	e002      	b.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0b4      	b.n	8003d5a <HAL_TIM_ConfigClockSource+0x186>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c28:	d03e      	beq.n	8003ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2e:	f200 8087 	bhi.w	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c36:	f000 8086 	beq.w	8003d46 <HAL_TIM_ConfigClockSource+0x172>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3e:	d87f      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b70      	cmp	r3, #112	@ 0x70
 8003c42:	d01a      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0xa6>
 8003c44:	2b70      	cmp	r3, #112	@ 0x70
 8003c46:	d87b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b60      	cmp	r3, #96	@ 0x60
 8003c4a:	d050      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x11a>
 8003c4c:	2b60      	cmp	r3, #96	@ 0x60
 8003c4e:	d877      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b50      	cmp	r3, #80	@ 0x50
 8003c52:	d03c      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xfa>
 8003c54:	2b50      	cmp	r3, #80	@ 0x50
 8003c56:	d873      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b40      	cmp	r3, #64	@ 0x40
 8003c5a:	d058      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x13a>
 8003c5c:	2b40      	cmp	r3, #64	@ 0x40
 8003c5e:	d86f      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b30      	cmp	r3, #48	@ 0x30
 8003c62:	d064      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15a>
 8003c64:	2b30      	cmp	r3, #48	@ 0x30
 8003c66:	d86b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d060      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15a>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d867      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05c      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15a>
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d05a      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15a>
 8003c78:	e062      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	f000 fad8 	bl	800423e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	609a      	str	r2, [r3, #8]
      break;
 8003ca6:	e04f      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	f000 fac1 	bl	800423e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e03c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f000 fa38 	bl	8004150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2150      	movs	r1, #80	@ 0x50
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fa8f 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003cec:	e02c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 fa56 	bl	80041ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2160      	movs	r1, #96	@ 0x60
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa7f 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e01c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 fa18 	bl	8004150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2140      	movs	r1, #64	@ 0x40
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fa6f 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e00c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f000 fa66 	bl	800420a <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e003      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e000      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a2f      	ldr	r2, [pc, #188]	@ (8003e34 <TIM_Base_SetConfig+0xd0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d82:	d007      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a2c      	ldr	r2, [pc, #176]	@ (8003e38 <TIM_Base_SetConfig+0xd4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_Base_SetConfig+0x30>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003e3c <TIM_Base_SetConfig+0xd8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a22      	ldr	r2, [pc, #136]	@ (8003e34 <TIM_Base_SetConfig+0xd0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e38 <TIM_Base_SetConfig+0xd4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0x62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e3c <TIM_Base_SetConfig+0xd8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <TIM_Base_SetConfig+0xd0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d103      	bne.n	8003e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	611a      	str	r2, [r3, #16]
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800

08003e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f023 0201 	bic.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f023 0302 	bic.w	r3, r3, #2
 8003e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	@ (8003f08 <TIM_OC1_SetConfig+0xc8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d10c      	bne.n	8003eb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0308 	bic.w	r3, r3, #8
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a13      	ldr	r2, [pc, #76]	@ (8003f08 <TIM_OC1_SetConfig+0xc8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d111      	bne.n	8003ee2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	621a      	str	r2, [r3, #32]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40012c00 	.word	0x40012c00

08003f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 0210 	bic.w	r2, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0320 	bic.w	r3, r3, #32
 8003f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <TIM_OC2_SetConfig+0xd0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d10d      	bne.n	8003f88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	@ (8003fdc <TIM_OC2_SetConfig+0xd0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d113      	bne.n	8003fb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00

08003fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0303 	bic.w	r3, r3, #3
 8004016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <TIM_OC3_SetConfig+0xd0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10d      	bne.n	800405a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a14      	ldr	r2, [pc, #80]	@ (80040b0 <TIM_OC3_SetConfig+0xd0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d113      	bne.n	800408a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40012c00 	.word	0x40012c00

080040b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	031b      	lsls	r3, r3, #12
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0f      	ldr	r2, [pc, #60]	@ (800414c <TIM_OC4_SetConfig+0x98>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d109      	bne.n	8004128 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800411a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	40012c00 	.word	0x40012c00

08004150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0201 	bic.w	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 030a 	bic.w	r3, r3, #10
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0210 	bic.w	r2, r3, #16
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	031b      	lsls	r3, r3, #12
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	f043 0307 	orr.w	r3, r3, #7
 800422c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr

0800423e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004258:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	021a      	lsls	r2, r3, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	431a      	orrs	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	609a      	str	r2, [r3, #8]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d8:	2302      	movs	r3, #2
 80042da:	e046      	b.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a16      	ldr	r2, [pc, #88]	@ (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004328:	d009      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a12      	ldr	r2, [pc, #72]	@ (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a10      	ldr	r2, [pc, #64]	@ (800437c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10c      	bne.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	4313      	orrs	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800

08004380 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004398:	2302      	movs	r3, #2
 800439a:	e03d      	b.n	8004418 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e042      	b.n	80044ba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fd fbf7 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2224      	movs	r2, #36	@ 0x24
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004464:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f972 	bl	8004750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800447a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800448a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800449a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	@ 0x28
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d175      	bne.n	80045ce <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_UART_Transmit+0x2c>
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e06e      	b.n	80045d0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	@ 0x21
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004500:	f7fd fc64 	bl	8001dcc <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	88fa      	ldrh	r2, [r7, #6]
 800450a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800451a:	d108      	bne.n	800452e <HAL_UART_Transmit+0x6c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e003      	b.n	8004536 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004536:	e02e      	b.n	8004596 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	2180      	movs	r1, #128	@ 0x80
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f848 	bl	80045d8 <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e03a      	b.n	80045d0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800456e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	3302      	adds	r3, #2
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e007      	b.n	8004588 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	781a      	ldrb	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3301      	adds	r3, #1
 8004586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1cb      	bne.n	8004538 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	2140      	movs	r1, #64	@ 0x40
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f814 	bl	80045d8 <UART_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e006      	b.n	80045d0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e000      	b.n	80045d0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e8:	e03b      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d037      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fd fbeb 	bl	8001dcc <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <UART_WaitOnFlagUntilTimeout+0x30>
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e03a      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d023      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b80      	cmp	r3, #128	@ 0x80
 800461e:	d020      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b40      	cmp	r3, #64	@ 0x40
 8004624:	d01d      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d116      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f81d 	bl	800468a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2208      	movs	r2, #8
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e00f      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d0b4      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468a:	b480      	push	{r7}
 800468c:	b095      	sub	sp, #84	@ 0x54
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60bb      	str	r3, [r7, #8]
   return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	647b      	str	r3, [r7, #68]	@ 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004722:	61ba      	str	r2, [r7, #24]
 8004724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004744:	bf00      	nop
 8004746:	3754      	adds	r7, #84	@ 0x54
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
	...

08004750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800478a:	f023 030c 	bic.w	r3, r3, #12
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	430b      	orrs	r3, r1
 8004796:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004864 <UART_SetConfig+0x114>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d103      	bne.n	80047c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe f9d6 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	e002      	b.n	80047c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fe f9be 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80047c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009a      	lsls	r2, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	4a22      	ldr	r2, [pc, #136]	@ (8004868 <UART_SetConfig+0x118>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	0119      	lsls	r1, r3, #4
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009a      	lsls	r2, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004868 <UART_SetConfig+0x118>)
 80047fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2064      	movs	r0, #100	@ 0x64
 8004806:	fb00 f303 	mul.w	r3, r0, r3
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	3332      	adds	r3, #50	@ 0x32
 8004810:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <UART_SetConfig+0x118>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800481c:	4419      	add	r1, r3
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	fbb2 f2f3 	udiv	r2, r2, r3
 8004834:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <UART_SetConfig+0x118>)
 8004836:	fba3 0302 	umull	r0, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2064      	movs	r0, #100	@ 0x64
 800483e:	fb00 f303 	mul.w	r3, r0, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	3332      	adds	r3, #50	@ 0x32
 8004848:	4a07      	ldr	r2, [pc, #28]	@ (8004868 <UART_SetConfig+0x118>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	440a      	add	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40013800 	.word	0x40013800
 8004868:	51eb851f 	.word	0x51eb851f

0800486c <sniprintf>:
 800486c:	b40c      	push	{r2, r3}
 800486e:	b530      	push	{r4, r5, lr}
 8004870:	4b18      	ldr	r3, [pc, #96]	@ (80048d4 <sniprintf+0x68>)
 8004872:	1e0c      	subs	r4, r1, #0
 8004874:	681d      	ldr	r5, [r3, #0]
 8004876:	b09d      	sub	sp, #116	@ 0x74
 8004878:	da08      	bge.n	800488c <sniprintf+0x20>
 800487a:	238b      	movs	r3, #139	@ 0x8b
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	602b      	str	r3, [r5, #0]
 8004882:	b01d      	add	sp, #116	@ 0x74
 8004884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004888:	b002      	add	sp, #8
 800488a:	4770      	bx	lr
 800488c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004890:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	931b      	str	r3, [sp, #108]	@ 0x6c
 800489a:	bf0c      	ite	eq
 800489c:	4623      	moveq	r3, r4
 800489e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	9307      	str	r3, [sp, #28]
 80048a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048aa:	9002      	str	r0, [sp, #8]
 80048ac:	9006      	str	r0, [sp, #24]
 80048ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80048b2:	4628      	mov	r0, r5
 80048b4:	ab21      	add	r3, sp, #132	@ 0x84
 80048b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80048b8:	a902      	add	r1, sp, #8
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	f000 f992 	bl	8004be4 <_svfiprintf_r>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	bfbc      	itt	lt
 80048c4:	238b      	movlt	r3, #139	@ 0x8b
 80048c6:	602b      	strlt	r3, [r5, #0]
 80048c8:	2c00      	cmp	r4, #0
 80048ca:	d0da      	beq.n	8004882 <sniprintf+0x16>
 80048cc:	2200      	movs	r2, #0
 80048ce:	9b02      	ldr	r3, [sp, #8]
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e7d6      	b.n	8004882 <sniprintf+0x16>
 80048d4:	20000014 	.word	0x20000014

080048d8 <memset>:
 80048d8:	4603      	mov	r3, r0
 80048da:	4402      	add	r2, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	d100      	bne.n	80048e2 <memset+0xa>
 80048e0:	4770      	bx	lr
 80048e2:	f803 1b01 	strb.w	r1, [r3], #1
 80048e6:	e7f9      	b.n	80048dc <memset+0x4>

080048e8 <__errno>:
 80048e8:	4b01      	ldr	r3, [pc, #4]	@ (80048f0 <__errno+0x8>)
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000014 	.word	0x20000014

080048f4 <__libc_init_array>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	2600      	movs	r6, #0
 80048f8:	4d0c      	ldr	r5, [pc, #48]	@ (800492c <__libc_init_array+0x38>)
 80048fa:	4c0d      	ldr	r4, [pc, #52]	@ (8004930 <__libc_init_array+0x3c>)
 80048fc:	1b64      	subs	r4, r4, r5
 80048fe:	10a4      	asrs	r4, r4, #2
 8004900:	42a6      	cmp	r6, r4
 8004902:	d109      	bne.n	8004918 <__libc_init_array+0x24>
 8004904:	f000 fca6 	bl	8005254 <_init>
 8004908:	2600      	movs	r6, #0
 800490a:	4d0a      	ldr	r5, [pc, #40]	@ (8004934 <__libc_init_array+0x40>)
 800490c:	4c0a      	ldr	r4, [pc, #40]	@ (8004938 <__libc_init_array+0x44>)
 800490e:	1b64      	subs	r4, r4, r5
 8004910:	10a4      	asrs	r4, r4, #2
 8004912:	42a6      	cmp	r6, r4
 8004914:	d105      	bne.n	8004922 <__libc_init_array+0x2e>
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	f855 3b04 	ldr.w	r3, [r5], #4
 800491c:	4798      	blx	r3
 800491e:	3601      	adds	r6, #1
 8004920:	e7ee      	b.n	8004900 <__libc_init_array+0xc>
 8004922:	f855 3b04 	ldr.w	r3, [r5], #4
 8004926:	4798      	blx	r3
 8004928:	3601      	adds	r6, #1
 800492a:	e7f2      	b.n	8004912 <__libc_init_array+0x1e>
 800492c:	080053a0 	.word	0x080053a0
 8004930:	080053a0 	.word	0x080053a0
 8004934:	080053a0 	.word	0x080053a0
 8004938:	080053a4 	.word	0x080053a4

0800493c <__retarget_lock_acquire_recursive>:
 800493c:	4770      	bx	lr

0800493e <__retarget_lock_release_recursive>:
 800493e:	4770      	bx	lr

08004940 <_free_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4605      	mov	r5, r0
 8004944:	2900      	cmp	r1, #0
 8004946:	d040      	beq.n	80049ca <_free_r+0x8a>
 8004948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800494c:	1f0c      	subs	r4, r1, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfb8      	it	lt
 8004952:	18e4      	addlt	r4, r4, r3
 8004954:	f000 f8de 	bl	8004b14 <__malloc_lock>
 8004958:	4a1c      	ldr	r2, [pc, #112]	@ (80049cc <_free_r+0x8c>)
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	b933      	cbnz	r3, 800496c <_free_r+0x2c>
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6014      	str	r4, [r2, #0]
 8004962:	4628      	mov	r0, r5
 8004964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004968:	f000 b8da 	b.w	8004b20 <__malloc_unlock>
 800496c:	42a3      	cmp	r3, r4
 800496e:	d908      	bls.n	8004982 <_free_r+0x42>
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	1821      	adds	r1, r4, r0
 8004974:	428b      	cmp	r3, r1
 8004976:	bf01      	itttt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	1809      	addeq	r1, r1, r0
 800497e:	6021      	streq	r1, [r4, #0]
 8004980:	e7ed      	b.n	800495e <_free_r+0x1e>
 8004982:	461a      	mov	r2, r3
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b10b      	cbz	r3, 800498c <_free_r+0x4c>
 8004988:	42a3      	cmp	r3, r4
 800498a:	d9fa      	bls.n	8004982 <_free_r+0x42>
 800498c:	6811      	ldr	r1, [r2, #0]
 800498e:	1850      	adds	r0, r2, r1
 8004990:	42a0      	cmp	r0, r4
 8004992:	d10b      	bne.n	80049ac <_free_r+0x6c>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	4401      	add	r1, r0
 8004998:	1850      	adds	r0, r2, r1
 800499a:	4283      	cmp	r3, r0
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	d1e0      	bne.n	8004962 <_free_r+0x22>
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4408      	add	r0, r1
 80049a6:	6010      	str	r0, [r2, #0]
 80049a8:	6053      	str	r3, [r2, #4]
 80049aa:	e7da      	b.n	8004962 <_free_r+0x22>
 80049ac:	d902      	bls.n	80049b4 <_free_r+0x74>
 80049ae:	230c      	movs	r3, #12
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	e7d6      	b.n	8004962 <_free_r+0x22>
 80049b4:	6820      	ldr	r0, [r4, #0]
 80049b6:	1821      	adds	r1, r4, r0
 80049b8:	428b      	cmp	r3, r1
 80049ba:	bf01      	itttt	eq
 80049bc:	6819      	ldreq	r1, [r3, #0]
 80049be:	685b      	ldreq	r3, [r3, #4]
 80049c0:	1809      	addeq	r1, r1, r0
 80049c2:	6021      	streq	r1, [r4, #0]
 80049c4:	6063      	str	r3, [r4, #4]
 80049c6:	6054      	str	r4, [r2, #4]
 80049c8:	e7cb      	b.n	8004962 <_free_r+0x22>
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	200002d0 	.word	0x200002d0

080049d0 <sbrk_aligned>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004a10 <sbrk_aligned+0x40>)
 80049d4:	460c      	mov	r4, r1
 80049d6:	6831      	ldr	r1, [r6, #0]
 80049d8:	4605      	mov	r5, r0
 80049da:	b911      	cbnz	r1, 80049e2 <sbrk_aligned+0x12>
 80049dc:	f000 fba8 	bl	8005130 <_sbrk_r>
 80049e0:	6030      	str	r0, [r6, #0]
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 fba3 	bl	8005130 <_sbrk_r>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d103      	bne.n	80049f6 <sbrk_aligned+0x26>
 80049ee:	f04f 34ff 	mov.w	r4, #4294967295
 80049f2:	4620      	mov	r0, r4
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	1cc4      	adds	r4, r0, #3
 80049f8:	f024 0403 	bic.w	r4, r4, #3
 80049fc:	42a0      	cmp	r0, r4
 80049fe:	d0f8      	beq.n	80049f2 <sbrk_aligned+0x22>
 8004a00:	1a21      	subs	r1, r4, r0
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 fb94 	bl	8005130 <_sbrk_r>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1f2      	bne.n	80049f2 <sbrk_aligned+0x22>
 8004a0c:	e7ef      	b.n	80049ee <sbrk_aligned+0x1e>
 8004a0e:	bf00      	nop
 8004a10:	200002cc 	.word	0x200002cc

08004a14 <_malloc_r>:
 8004a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a18:	1ccd      	adds	r5, r1, #3
 8004a1a:	f025 0503 	bic.w	r5, r5, #3
 8004a1e:	3508      	adds	r5, #8
 8004a20:	2d0c      	cmp	r5, #12
 8004a22:	bf38      	it	cc
 8004a24:	250c      	movcc	r5, #12
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	4606      	mov	r6, r0
 8004a2a:	db01      	blt.n	8004a30 <_malloc_r+0x1c>
 8004a2c:	42a9      	cmp	r1, r5
 8004a2e:	d904      	bls.n	8004a3a <_malloc_r+0x26>
 8004a30:	230c      	movs	r3, #12
 8004a32:	6033      	str	r3, [r6, #0]
 8004a34:	2000      	movs	r0, #0
 8004a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b10 <_malloc_r+0xfc>
 8004a3e:	f000 f869 	bl	8004b14 <__malloc_lock>
 8004a42:	f8d8 3000 	ldr.w	r3, [r8]
 8004a46:	461c      	mov	r4, r3
 8004a48:	bb44      	cbnz	r4, 8004a9c <_malloc_r+0x88>
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7ff ffbf 	bl	80049d0 <sbrk_aligned>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	4604      	mov	r4, r0
 8004a56:	d158      	bne.n	8004b0a <_malloc_r+0xf6>
 8004a58:	f8d8 4000 	ldr.w	r4, [r8]
 8004a5c:	4627      	mov	r7, r4
 8004a5e:	2f00      	cmp	r7, #0
 8004a60:	d143      	bne.n	8004aea <_malloc_r+0xd6>
 8004a62:	2c00      	cmp	r4, #0
 8004a64:	d04b      	beq.n	8004afe <_malloc_r+0xea>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	4639      	mov	r1, r7
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	eb04 0903 	add.w	r9, r4, r3
 8004a70:	f000 fb5e 	bl	8005130 <_sbrk_r>
 8004a74:	4581      	cmp	r9, r0
 8004a76:	d142      	bne.n	8004afe <_malloc_r+0xea>
 8004a78:	6821      	ldr	r1, [r4, #0]
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	1a6d      	subs	r5, r5, r1
 8004a7e:	4629      	mov	r1, r5
 8004a80:	f7ff ffa6 	bl	80049d0 <sbrk_aligned>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d03a      	beq.n	8004afe <_malloc_r+0xea>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	442b      	add	r3, r5
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	bb62      	cbnz	r2, 8004af0 <_malloc_r+0xdc>
 8004a96:	f8c8 7000 	str.w	r7, [r8]
 8004a9a:	e00f      	b.n	8004abc <_malloc_r+0xa8>
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	1b52      	subs	r2, r2, r5
 8004aa0:	d420      	bmi.n	8004ae4 <_malloc_r+0xd0>
 8004aa2:	2a0b      	cmp	r2, #11
 8004aa4:	d917      	bls.n	8004ad6 <_malloc_r+0xc2>
 8004aa6:	1961      	adds	r1, r4, r5
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	6025      	str	r5, [r4, #0]
 8004aac:	bf18      	it	ne
 8004aae:	6059      	strne	r1, [r3, #4]
 8004ab0:	6863      	ldr	r3, [r4, #4]
 8004ab2:	bf08      	it	eq
 8004ab4:	f8c8 1000 	streq.w	r1, [r8]
 8004ab8:	5162      	str	r2, [r4, r5]
 8004aba:	604b      	str	r3, [r1, #4]
 8004abc:	4630      	mov	r0, r6
 8004abe:	f000 f82f 	bl	8004b20 <__malloc_unlock>
 8004ac2:	f104 000b 	add.w	r0, r4, #11
 8004ac6:	1d23      	adds	r3, r4, #4
 8004ac8:	f020 0007 	bic.w	r0, r0, #7
 8004acc:	1ac2      	subs	r2, r0, r3
 8004ace:	bf1c      	itt	ne
 8004ad0:	1a1b      	subne	r3, r3, r0
 8004ad2:	50a3      	strne	r3, [r4, r2]
 8004ad4:	e7af      	b.n	8004a36 <_malloc_r+0x22>
 8004ad6:	6862      	ldr	r2, [r4, #4]
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	bf0c      	ite	eq
 8004adc:	f8c8 2000 	streq.w	r2, [r8]
 8004ae0:	605a      	strne	r2, [r3, #4]
 8004ae2:	e7eb      	b.n	8004abc <_malloc_r+0xa8>
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	6864      	ldr	r4, [r4, #4]
 8004ae8:	e7ae      	b.n	8004a48 <_malloc_r+0x34>
 8004aea:	463c      	mov	r4, r7
 8004aec:	687f      	ldr	r7, [r7, #4]
 8004aee:	e7b6      	b.n	8004a5e <_malloc_r+0x4a>
 8004af0:	461a      	mov	r2, r3
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d1fb      	bne.n	8004af0 <_malloc_r+0xdc>
 8004af8:	2300      	movs	r3, #0
 8004afa:	6053      	str	r3, [r2, #4]
 8004afc:	e7de      	b.n	8004abc <_malloc_r+0xa8>
 8004afe:	230c      	movs	r3, #12
 8004b00:	4630      	mov	r0, r6
 8004b02:	6033      	str	r3, [r6, #0]
 8004b04:	f000 f80c 	bl	8004b20 <__malloc_unlock>
 8004b08:	e794      	b.n	8004a34 <_malloc_r+0x20>
 8004b0a:	6005      	str	r5, [r0, #0]
 8004b0c:	e7d6      	b.n	8004abc <_malloc_r+0xa8>
 8004b0e:	bf00      	nop
 8004b10:	200002d0 	.word	0x200002d0

08004b14 <__malloc_lock>:
 8004b14:	4801      	ldr	r0, [pc, #4]	@ (8004b1c <__malloc_lock+0x8>)
 8004b16:	f7ff bf11 	b.w	800493c <__retarget_lock_acquire_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	200002c8 	.word	0x200002c8

08004b20 <__malloc_unlock>:
 8004b20:	4801      	ldr	r0, [pc, #4]	@ (8004b28 <__malloc_unlock+0x8>)
 8004b22:	f7ff bf0c 	b.w	800493e <__retarget_lock_release_recursive>
 8004b26:	bf00      	nop
 8004b28:	200002c8 	.word	0x200002c8

08004b2c <__ssputs_r>:
 8004b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	461f      	mov	r7, r3
 8004b32:	688e      	ldr	r6, [r1, #8]
 8004b34:	4682      	mov	sl, r0
 8004b36:	42be      	cmp	r6, r7
 8004b38:	460c      	mov	r4, r1
 8004b3a:	4690      	mov	r8, r2
 8004b3c:	680b      	ldr	r3, [r1, #0]
 8004b3e:	d82d      	bhi.n	8004b9c <__ssputs_r+0x70>
 8004b40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b48:	d026      	beq.n	8004b98 <__ssputs_r+0x6c>
 8004b4a:	6965      	ldr	r5, [r4, #20]
 8004b4c:	6909      	ldr	r1, [r1, #16]
 8004b4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b52:	eba3 0901 	sub.w	r9, r3, r1
 8004b56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b5a:	1c7b      	adds	r3, r7, #1
 8004b5c:	444b      	add	r3, r9
 8004b5e:	106d      	asrs	r5, r5, #1
 8004b60:	429d      	cmp	r5, r3
 8004b62:	bf38      	it	cc
 8004b64:	461d      	movcc	r5, r3
 8004b66:	0553      	lsls	r3, r2, #21
 8004b68:	d527      	bpl.n	8004bba <__ssputs_r+0x8e>
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f7ff ff52 	bl	8004a14 <_malloc_r>
 8004b70:	4606      	mov	r6, r0
 8004b72:	b360      	cbz	r0, 8004bce <__ssputs_r+0xa2>
 8004b74:	464a      	mov	r2, r9
 8004b76:	6921      	ldr	r1, [r4, #16]
 8004b78:	f000 faf8 	bl	800516c <memcpy>
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	6126      	str	r6, [r4, #16]
 8004b8a:	444e      	add	r6, r9
 8004b8c:	6026      	str	r6, [r4, #0]
 8004b8e:	463e      	mov	r6, r7
 8004b90:	6165      	str	r5, [r4, #20]
 8004b92:	eba5 0509 	sub.w	r5, r5, r9
 8004b96:	60a5      	str	r5, [r4, #8]
 8004b98:	42be      	cmp	r6, r7
 8004b9a:	d900      	bls.n	8004b9e <__ssputs_r+0x72>
 8004b9c:	463e      	mov	r6, r7
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	f000 faaa 	bl	80050fc <memmove>
 8004ba8:	2000      	movs	r0, #0
 8004baa:	68a3      	ldr	r3, [r4, #8]
 8004bac:	1b9b      	subs	r3, r3, r6
 8004bae:	60a3      	str	r3, [r4, #8]
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	4433      	add	r3, r6
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bba:	462a      	mov	r2, r5
 8004bbc:	f000 fae4 	bl	8005188 <_realloc_r>
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d1e0      	bne.n	8004b88 <__ssputs_r+0x5c>
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	6921      	ldr	r1, [r4, #16]
 8004bca:	f7ff feb9 	bl	8004940 <_free_r>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	f8ca 3000 	str.w	r3, [sl]
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	e7e9      	b.n	8004bb6 <__ssputs_r+0x8a>
	...

08004be4 <_svfiprintf_r>:
 8004be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be8:	4698      	mov	r8, r3
 8004bea:	898b      	ldrh	r3, [r1, #12]
 8004bec:	4607      	mov	r7, r0
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	4614      	mov	r4, r2
 8004bf4:	b09d      	sub	sp, #116	@ 0x74
 8004bf6:	d510      	bpl.n	8004c1a <_svfiprintf_r+0x36>
 8004bf8:	690b      	ldr	r3, [r1, #16]
 8004bfa:	b973      	cbnz	r3, 8004c1a <_svfiprintf_r+0x36>
 8004bfc:	2140      	movs	r1, #64	@ 0x40
 8004bfe:	f7ff ff09 	bl	8004a14 <_malloc_r>
 8004c02:	6028      	str	r0, [r5, #0]
 8004c04:	6128      	str	r0, [r5, #16]
 8004c06:	b930      	cbnz	r0, 8004c16 <_svfiprintf_r+0x32>
 8004c08:	230c      	movs	r3, #12
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	b01d      	add	sp, #116	@ 0x74
 8004c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c16:	2340      	movs	r3, #64	@ 0x40
 8004c18:	616b      	str	r3, [r5, #20]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c1e:	2320      	movs	r3, #32
 8004c20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c24:	2330      	movs	r3, #48	@ 0x30
 8004c26:	f04f 0901 	mov.w	r9, #1
 8004c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004dc8 <_svfiprintf_r+0x1e4>
 8004c32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c36:	4623      	mov	r3, r4
 8004c38:	469a      	mov	sl, r3
 8004c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c3e:	b10a      	cbz	r2, 8004c44 <_svfiprintf_r+0x60>
 8004c40:	2a25      	cmp	r2, #37	@ 0x25
 8004c42:	d1f9      	bne.n	8004c38 <_svfiprintf_r+0x54>
 8004c44:	ebba 0b04 	subs.w	fp, sl, r4
 8004c48:	d00b      	beq.n	8004c62 <_svfiprintf_r+0x7e>
 8004c4a:	465b      	mov	r3, fp
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	4629      	mov	r1, r5
 8004c50:	4638      	mov	r0, r7
 8004c52:	f7ff ff6b 	bl	8004b2c <__ssputs_r>
 8004c56:	3001      	adds	r0, #1
 8004c58:	f000 80a7 	beq.w	8004daa <_svfiprintf_r+0x1c6>
 8004c5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c5e:	445a      	add	r2, fp
 8004c60:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c62:	f89a 3000 	ldrb.w	r3, [sl]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 809f 	beq.w	8004daa <_svfiprintf_r+0x1c6>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c76:	f10a 0a01 	add.w	sl, sl, #1
 8004c7a:	9304      	str	r3, [sp, #16]
 8004c7c:	9307      	str	r3, [sp, #28]
 8004c7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c82:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c84:	4654      	mov	r4, sl
 8004c86:	2205      	movs	r2, #5
 8004c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8c:	484e      	ldr	r0, [pc, #312]	@ (8004dc8 <_svfiprintf_r+0x1e4>)
 8004c8e:	f000 fa5f 	bl	8005150 <memchr>
 8004c92:	9a04      	ldr	r2, [sp, #16]
 8004c94:	b9d8      	cbnz	r0, 8004cce <_svfiprintf_r+0xea>
 8004c96:	06d0      	lsls	r0, r2, #27
 8004c98:	bf44      	itt	mi
 8004c9a:	2320      	movmi	r3, #32
 8004c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ca0:	0711      	lsls	r1, r2, #28
 8004ca2:	bf44      	itt	mi
 8004ca4:	232b      	movmi	r3, #43	@ 0x2b
 8004ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004caa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cb0:	d015      	beq.n	8004cde <_svfiprintf_r+0xfa>
 8004cb2:	4654      	mov	r4, sl
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f04f 0c0a 	mov.w	ip, #10
 8004cba:	9a07      	ldr	r2, [sp, #28]
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cc2:	3b30      	subs	r3, #48	@ 0x30
 8004cc4:	2b09      	cmp	r3, #9
 8004cc6:	d94b      	bls.n	8004d60 <_svfiprintf_r+0x17c>
 8004cc8:	b1b0      	cbz	r0, 8004cf8 <_svfiprintf_r+0x114>
 8004cca:	9207      	str	r2, [sp, #28]
 8004ccc:	e014      	b.n	8004cf8 <_svfiprintf_r+0x114>
 8004cce:	eba0 0308 	sub.w	r3, r0, r8
 8004cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	46a2      	mov	sl, r4
 8004cda:	9304      	str	r3, [sp, #16]
 8004cdc:	e7d2      	b.n	8004c84 <_svfiprintf_r+0xa0>
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	1d19      	adds	r1, r3, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	9103      	str	r1, [sp, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bfbb      	ittet	lt
 8004cea:	425b      	neglt	r3, r3
 8004cec:	f042 0202 	orrlt.w	r2, r2, #2
 8004cf0:	9307      	strge	r3, [sp, #28]
 8004cf2:	9307      	strlt	r3, [sp, #28]
 8004cf4:	bfb8      	it	lt
 8004cf6:	9204      	strlt	r2, [sp, #16]
 8004cf8:	7823      	ldrb	r3, [r4, #0]
 8004cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cfc:	d10a      	bne.n	8004d14 <_svfiprintf_r+0x130>
 8004cfe:	7863      	ldrb	r3, [r4, #1]
 8004d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d02:	d132      	bne.n	8004d6a <_svfiprintf_r+0x186>
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	3402      	adds	r4, #2
 8004d08:	1d1a      	adds	r2, r3, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	9203      	str	r2, [sp, #12]
 8004d0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d12:	9305      	str	r3, [sp, #20]
 8004d14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004dcc <_svfiprintf_r+0x1e8>
 8004d18:	2203      	movs	r2, #3
 8004d1a:	4650      	mov	r0, sl
 8004d1c:	7821      	ldrb	r1, [r4, #0]
 8004d1e:	f000 fa17 	bl	8005150 <memchr>
 8004d22:	b138      	cbz	r0, 8004d34 <_svfiprintf_r+0x150>
 8004d24:	2240      	movs	r2, #64	@ 0x40
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	eba0 000a 	sub.w	r0, r0, sl
 8004d2c:	4082      	lsls	r2, r0
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	3401      	adds	r4, #1
 8004d32:	9304      	str	r3, [sp, #16]
 8004d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d38:	2206      	movs	r2, #6
 8004d3a:	4825      	ldr	r0, [pc, #148]	@ (8004dd0 <_svfiprintf_r+0x1ec>)
 8004d3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d40:	f000 fa06 	bl	8005150 <memchr>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d036      	beq.n	8004db6 <_svfiprintf_r+0x1d2>
 8004d48:	4b22      	ldr	r3, [pc, #136]	@ (8004dd4 <_svfiprintf_r+0x1f0>)
 8004d4a:	bb1b      	cbnz	r3, 8004d94 <_svfiprintf_r+0x1b0>
 8004d4c:	9b03      	ldr	r3, [sp, #12]
 8004d4e:	3307      	adds	r3, #7
 8004d50:	f023 0307 	bic.w	r3, r3, #7
 8004d54:	3308      	adds	r3, #8
 8004d56:	9303      	str	r3, [sp, #12]
 8004d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d5a:	4433      	add	r3, r6
 8004d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d5e:	e76a      	b.n	8004c36 <_svfiprintf_r+0x52>
 8004d60:	460c      	mov	r4, r1
 8004d62:	2001      	movs	r0, #1
 8004d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d68:	e7a8      	b.n	8004cbc <_svfiprintf_r+0xd8>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f04f 0c0a 	mov.w	ip, #10
 8004d70:	4619      	mov	r1, r3
 8004d72:	3401      	adds	r4, #1
 8004d74:	9305      	str	r3, [sp, #20]
 8004d76:	4620      	mov	r0, r4
 8004d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d7c:	3a30      	subs	r2, #48	@ 0x30
 8004d7e:	2a09      	cmp	r2, #9
 8004d80:	d903      	bls.n	8004d8a <_svfiprintf_r+0x1a6>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0c6      	beq.n	8004d14 <_svfiprintf_r+0x130>
 8004d86:	9105      	str	r1, [sp, #20]
 8004d88:	e7c4      	b.n	8004d14 <_svfiprintf_r+0x130>
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d92:	e7f0      	b.n	8004d76 <_svfiprintf_r+0x192>
 8004d94:	ab03      	add	r3, sp, #12
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	462a      	mov	r2, r5
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd8 <_svfiprintf_r+0x1f4>)
 8004d9e:	a904      	add	r1, sp, #16
 8004da0:	f3af 8000 	nop.w
 8004da4:	1c42      	adds	r2, r0, #1
 8004da6:	4606      	mov	r6, r0
 8004da8:	d1d6      	bne.n	8004d58 <_svfiprintf_r+0x174>
 8004daa:	89ab      	ldrh	r3, [r5, #12]
 8004dac:	065b      	lsls	r3, r3, #25
 8004dae:	f53f af2d 	bmi.w	8004c0c <_svfiprintf_r+0x28>
 8004db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004db4:	e72c      	b.n	8004c10 <_svfiprintf_r+0x2c>
 8004db6:	ab03      	add	r3, sp, #12
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	462a      	mov	r2, r5
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <_svfiprintf_r+0x1f4>)
 8004dc0:	a904      	add	r1, sp, #16
 8004dc2:	f000 f87d 	bl	8004ec0 <_printf_i>
 8004dc6:	e7ed      	b.n	8004da4 <_svfiprintf_r+0x1c0>
 8004dc8:	0800536a 	.word	0x0800536a
 8004dcc:	08005370 	.word	0x08005370
 8004dd0:	08005374 	.word	0x08005374
 8004dd4:	00000000 	.word	0x00000000
 8004dd8:	08004b2d 	.word	0x08004b2d

08004ddc <_printf_common>:
 8004ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de0:	4616      	mov	r6, r2
 8004de2:	4698      	mov	r8, r3
 8004de4:	688a      	ldr	r2, [r1, #8]
 8004de6:	690b      	ldr	r3, [r1, #16]
 8004de8:	4607      	mov	r7, r0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bfb8      	it	lt
 8004dee:	4613      	movlt	r3, r2
 8004df0:	6033      	str	r3, [r6, #0]
 8004df2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004df6:	460c      	mov	r4, r1
 8004df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dfc:	b10a      	cbz	r2, 8004e02 <_printf_common+0x26>
 8004dfe:	3301      	adds	r3, #1
 8004e00:	6033      	str	r3, [r6, #0]
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	0699      	lsls	r1, r3, #26
 8004e06:	bf42      	ittt	mi
 8004e08:	6833      	ldrmi	r3, [r6, #0]
 8004e0a:	3302      	addmi	r3, #2
 8004e0c:	6033      	strmi	r3, [r6, #0]
 8004e0e:	6825      	ldr	r5, [r4, #0]
 8004e10:	f015 0506 	ands.w	r5, r5, #6
 8004e14:	d106      	bne.n	8004e24 <_printf_common+0x48>
 8004e16:	f104 0a19 	add.w	sl, r4, #25
 8004e1a:	68e3      	ldr	r3, [r4, #12]
 8004e1c:	6832      	ldr	r2, [r6, #0]
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	42ab      	cmp	r3, r5
 8004e22:	dc2b      	bgt.n	8004e7c <_printf_common+0xa0>
 8004e24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	3b00      	subs	r3, #0
 8004e2c:	bf18      	it	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	0692      	lsls	r2, r2, #26
 8004e32:	d430      	bmi.n	8004e96 <_printf_common+0xba>
 8004e34:	4641      	mov	r1, r8
 8004e36:	4638      	mov	r0, r7
 8004e38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e3c:	47c8      	blx	r9
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d023      	beq.n	8004e8a <_printf_common+0xae>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	6922      	ldr	r2, [r4, #16]
 8004e46:	f003 0306 	and.w	r3, r3, #6
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	bf14      	ite	ne
 8004e4e:	2500      	movne	r5, #0
 8004e50:	6833      	ldreq	r3, [r6, #0]
 8004e52:	f04f 0600 	mov.w	r6, #0
 8004e56:	bf08      	it	eq
 8004e58:	68e5      	ldreq	r5, [r4, #12]
 8004e5a:	f104 041a 	add.w	r4, r4, #26
 8004e5e:	bf08      	it	eq
 8004e60:	1aed      	subeq	r5, r5, r3
 8004e62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e66:	bf08      	it	eq
 8004e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	bfc4      	itt	gt
 8004e70:	1a9b      	subgt	r3, r3, r2
 8004e72:	18ed      	addgt	r5, r5, r3
 8004e74:	42b5      	cmp	r5, r6
 8004e76:	d11a      	bne.n	8004eae <_printf_common+0xd2>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	e008      	b.n	8004e8e <_printf_common+0xb2>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4652      	mov	r2, sl
 8004e80:	4641      	mov	r1, r8
 8004e82:	4638      	mov	r0, r7
 8004e84:	47c8      	blx	r9
 8004e86:	3001      	adds	r0, #1
 8004e88:	d103      	bne.n	8004e92 <_printf_common+0xb6>
 8004e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e92:	3501      	adds	r5, #1
 8004e94:	e7c1      	b.n	8004e1a <_printf_common+0x3e>
 8004e96:	2030      	movs	r0, #48	@ 0x30
 8004e98:	18e1      	adds	r1, r4, r3
 8004e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ea4:	4422      	add	r2, r4
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004eac:	e7c2      	b.n	8004e34 <_printf_common+0x58>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	47c8      	blx	r9
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d0e6      	beq.n	8004e8a <_printf_common+0xae>
 8004ebc:	3601      	adds	r6, #1
 8004ebe:	e7d9      	b.n	8004e74 <_printf_common+0x98>

08004ec0 <_printf_i>:
 8004ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	7e0f      	ldrb	r7, [r1, #24]
 8004ec6:	4691      	mov	r9, r2
 8004ec8:	2f78      	cmp	r7, #120	@ 0x78
 8004eca:	4680      	mov	r8, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	469a      	mov	sl, r3
 8004ed0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ed6:	d807      	bhi.n	8004ee8 <_printf_i+0x28>
 8004ed8:	2f62      	cmp	r7, #98	@ 0x62
 8004eda:	d80a      	bhi.n	8004ef2 <_printf_i+0x32>
 8004edc:	2f00      	cmp	r7, #0
 8004ede:	f000 80d1 	beq.w	8005084 <_printf_i+0x1c4>
 8004ee2:	2f58      	cmp	r7, #88	@ 0x58
 8004ee4:	f000 80b8 	beq.w	8005058 <_printf_i+0x198>
 8004ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ef0:	e03a      	b.n	8004f68 <_printf_i+0xa8>
 8004ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ef6:	2b15      	cmp	r3, #21
 8004ef8:	d8f6      	bhi.n	8004ee8 <_printf_i+0x28>
 8004efa:	a101      	add	r1, pc, #4	@ (adr r1, 8004f00 <_printf_i+0x40>)
 8004efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f00:	08004f59 	.word	0x08004f59
 8004f04:	08004f6d 	.word	0x08004f6d
 8004f08:	08004ee9 	.word	0x08004ee9
 8004f0c:	08004ee9 	.word	0x08004ee9
 8004f10:	08004ee9 	.word	0x08004ee9
 8004f14:	08004ee9 	.word	0x08004ee9
 8004f18:	08004f6d 	.word	0x08004f6d
 8004f1c:	08004ee9 	.word	0x08004ee9
 8004f20:	08004ee9 	.word	0x08004ee9
 8004f24:	08004ee9 	.word	0x08004ee9
 8004f28:	08004ee9 	.word	0x08004ee9
 8004f2c:	0800506b 	.word	0x0800506b
 8004f30:	08004f97 	.word	0x08004f97
 8004f34:	08005025 	.word	0x08005025
 8004f38:	08004ee9 	.word	0x08004ee9
 8004f3c:	08004ee9 	.word	0x08004ee9
 8004f40:	0800508d 	.word	0x0800508d
 8004f44:	08004ee9 	.word	0x08004ee9
 8004f48:	08004f97 	.word	0x08004f97
 8004f4c:	08004ee9 	.word	0x08004ee9
 8004f50:	08004ee9 	.word	0x08004ee9
 8004f54:	0800502d 	.word	0x0800502d
 8004f58:	6833      	ldr	r3, [r6, #0]
 8004f5a:	1d1a      	adds	r2, r3, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6032      	str	r2, [r6, #0]
 8004f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e09c      	b.n	80050a6 <_printf_i+0x1e6>
 8004f6c:	6833      	ldr	r3, [r6, #0]
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	1d19      	adds	r1, r3, #4
 8004f72:	6031      	str	r1, [r6, #0]
 8004f74:	0606      	lsls	r6, r0, #24
 8004f76:	d501      	bpl.n	8004f7c <_printf_i+0xbc>
 8004f78:	681d      	ldr	r5, [r3, #0]
 8004f7a:	e003      	b.n	8004f84 <_printf_i+0xc4>
 8004f7c:	0645      	lsls	r5, r0, #25
 8004f7e:	d5fb      	bpl.n	8004f78 <_printf_i+0xb8>
 8004f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f84:	2d00      	cmp	r5, #0
 8004f86:	da03      	bge.n	8004f90 <_printf_i+0xd0>
 8004f88:	232d      	movs	r3, #45	@ 0x2d
 8004f8a:	426d      	negs	r5, r5
 8004f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f90:	230a      	movs	r3, #10
 8004f92:	4858      	ldr	r0, [pc, #352]	@ (80050f4 <_printf_i+0x234>)
 8004f94:	e011      	b.n	8004fba <_printf_i+0xfa>
 8004f96:	6821      	ldr	r1, [r4, #0]
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	0608      	lsls	r0, r1, #24
 8004f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fa0:	d402      	bmi.n	8004fa8 <_printf_i+0xe8>
 8004fa2:	0649      	lsls	r1, r1, #25
 8004fa4:	bf48      	it	mi
 8004fa6:	b2ad      	uxthmi	r5, r5
 8004fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004faa:	6033      	str	r3, [r6, #0]
 8004fac:	bf14      	ite	ne
 8004fae:	230a      	movne	r3, #10
 8004fb0:	2308      	moveq	r3, #8
 8004fb2:	4850      	ldr	r0, [pc, #320]	@ (80050f4 <_printf_i+0x234>)
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fba:	6866      	ldr	r6, [r4, #4]
 8004fbc:	2e00      	cmp	r6, #0
 8004fbe:	60a6      	str	r6, [r4, #8]
 8004fc0:	db05      	blt.n	8004fce <_printf_i+0x10e>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	432e      	orrs	r6, r5
 8004fc6:	f021 0104 	bic.w	r1, r1, #4
 8004fca:	6021      	str	r1, [r4, #0]
 8004fcc:	d04b      	beq.n	8005066 <_printf_i+0x1a6>
 8004fce:	4616      	mov	r6, r2
 8004fd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fd4:	fb03 5711 	mls	r7, r3, r1, r5
 8004fd8:	5dc7      	ldrb	r7, [r0, r7]
 8004fda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fde:	462f      	mov	r7, r5
 8004fe0:	42bb      	cmp	r3, r7
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	d9f4      	bls.n	8004fd0 <_printf_i+0x110>
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d10b      	bne.n	8005002 <_printf_i+0x142>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	07df      	lsls	r7, r3, #31
 8004fee:	d508      	bpl.n	8005002 <_printf_i+0x142>
 8004ff0:	6923      	ldr	r3, [r4, #16]
 8004ff2:	6861      	ldr	r1, [r4, #4]
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	bfde      	ittt	le
 8004ff8:	2330      	movle	r3, #48	@ 0x30
 8004ffa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ffe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005002:	1b92      	subs	r2, r2, r6
 8005004:	6122      	str	r2, [r4, #16]
 8005006:	464b      	mov	r3, r9
 8005008:	4621      	mov	r1, r4
 800500a:	4640      	mov	r0, r8
 800500c:	f8cd a000 	str.w	sl, [sp]
 8005010:	aa03      	add	r2, sp, #12
 8005012:	f7ff fee3 	bl	8004ddc <_printf_common>
 8005016:	3001      	adds	r0, #1
 8005018:	d14a      	bne.n	80050b0 <_printf_i+0x1f0>
 800501a:	f04f 30ff 	mov.w	r0, #4294967295
 800501e:	b004      	add	sp, #16
 8005020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	f043 0320 	orr.w	r3, r3, #32
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	2778      	movs	r7, #120	@ 0x78
 800502e:	4832      	ldr	r0, [pc, #200]	@ (80050f8 <_printf_i+0x238>)
 8005030:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	6831      	ldr	r1, [r6, #0]
 8005038:	061f      	lsls	r7, r3, #24
 800503a:	f851 5b04 	ldr.w	r5, [r1], #4
 800503e:	d402      	bmi.n	8005046 <_printf_i+0x186>
 8005040:	065f      	lsls	r7, r3, #25
 8005042:	bf48      	it	mi
 8005044:	b2ad      	uxthmi	r5, r5
 8005046:	6031      	str	r1, [r6, #0]
 8005048:	07d9      	lsls	r1, r3, #31
 800504a:	bf44      	itt	mi
 800504c:	f043 0320 	orrmi.w	r3, r3, #32
 8005050:	6023      	strmi	r3, [r4, #0]
 8005052:	b11d      	cbz	r5, 800505c <_printf_i+0x19c>
 8005054:	2310      	movs	r3, #16
 8005056:	e7ad      	b.n	8004fb4 <_printf_i+0xf4>
 8005058:	4826      	ldr	r0, [pc, #152]	@ (80050f4 <_printf_i+0x234>)
 800505a:	e7e9      	b.n	8005030 <_printf_i+0x170>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	f023 0320 	bic.w	r3, r3, #32
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	e7f6      	b.n	8005054 <_printf_i+0x194>
 8005066:	4616      	mov	r6, r2
 8005068:	e7bd      	b.n	8004fe6 <_printf_i+0x126>
 800506a:	6833      	ldr	r3, [r6, #0]
 800506c:	6825      	ldr	r5, [r4, #0]
 800506e:	1d18      	adds	r0, r3, #4
 8005070:	6961      	ldr	r1, [r4, #20]
 8005072:	6030      	str	r0, [r6, #0]
 8005074:	062e      	lsls	r6, r5, #24
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	d501      	bpl.n	800507e <_printf_i+0x1be>
 800507a:	6019      	str	r1, [r3, #0]
 800507c:	e002      	b.n	8005084 <_printf_i+0x1c4>
 800507e:	0668      	lsls	r0, r5, #25
 8005080:	d5fb      	bpl.n	800507a <_printf_i+0x1ba>
 8005082:	8019      	strh	r1, [r3, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	4616      	mov	r6, r2
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	e7bc      	b.n	8005006 <_printf_i+0x146>
 800508c:	6833      	ldr	r3, [r6, #0]
 800508e:	2100      	movs	r1, #0
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	6032      	str	r2, [r6, #0]
 8005094:	681e      	ldr	r6, [r3, #0]
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	4630      	mov	r0, r6
 800509a:	f000 f859 	bl	8005150 <memchr>
 800509e:	b108      	cbz	r0, 80050a4 <_printf_i+0x1e4>
 80050a0:	1b80      	subs	r0, r0, r6
 80050a2:	6060      	str	r0, [r4, #4]
 80050a4:	6863      	ldr	r3, [r4, #4]
 80050a6:	6123      	str	r3, [r4, #16]
 80050a8:	2300      	movs	r3, #0
 80050aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ae:	e7aa      	b.n	8005006 <_printf_i+0x146>
 80050b0:	4632      	mov	r2, r6
 80050b2:	4649      	mov	r1, r9
 80050b4:	4640      	mov	r0, r8
 80050b6:	6923      	ldr	r3, [r4, #16]
 80050b8:	47d0      	blx	sl
 80050ba:	3001      	adds	r0, #1
 80050bc:	d0ad      	beq.n	800501a <_printf_i+0x15a>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	079b      	lsls	r3, r3, #30
 80050c2:	d413      	bmi.n	80050ec <_printf_i+0x22c>
 80050c4:	68e0      	ldr	r0, [r4, #12]
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	4298      	cmp	r0, r3
 80050ca:	bfb8      	it	lt
 80050cc:	4618      	movlt	r0, r3
 80050ce:	e7a6      	b.n	800501e <_printf_i+0x15e>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4632      	mov	r2, r6
 80050d4:	4649      	mov	r1, r9
 80050d6:	4640      	mov	r0, r8
 80050d8:	47d0      	blx	sl
 80050da:	3001      	adds	r0, #1
 80050dc:	d09d      	beq.n	800501a <_printf_i+0x15a>
 80050de:	3501      	adds	r5, #1
 80050e0:	68e3      	ldr	r3, [r4, #12]
 80050e2:	9903      	ldr	r1, [sp, #12]
 80050e4:	1a5b      	subs	r3, r3, r1
 80050e6:	42ab      	cmp	r3, r5
 80050e8:	dcf2      	bgt.n	80050d0 <_printf_i+0x210>
 80050ea:	e7eb      	b.n	80050c4 <_printf_i+0x204>
 80050ec:	2500      	movs	r5, #0
 80050ee:	f104 0619 	add.w	r6, r4, #25
 80050f2:	e7f5      	b.n	80050e0 <_printf_i+0x220>
 80050f4:	0800537b 	.word	0x0800537b
 80050f8:	0800538c 	.word	0x0800538c

080050fc <memmove>:
 80050fc:	4288      	cmp	r0, r1
 80050fe:	b510      	push	{r4, lr}
 8005100:	eb01 0402 	add.w	r4, r1, r2
 8005104:	d902      	bls.n	800510c <memmove+0x10>
 8005106:	4284      	cmp	r4, r0
 8005108:	4623      	mov	r3, r4
 800510a:	d807      	bhi.n	800511c <memmove+0x20>
 800510c:	1e43      	subs	r3, r0, #1
 800510e:	42a1      	cmp	r1, r4
 8005110:	d008      	beq.n	8005124 <memmove+0x28>
 8005112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800511a:	e7f8      	b.n	800510e <memmove+0x12>
 800511c:	4601      	mov	r1, r0
 800511e:	4402      	add	r2, r0
 8005120:	428a      	cmp	r2, r1
 8005122:	d100      	bne.n	8005126 <memmove+0x2a>
 8005124:	bd10      	pop	{r4, pc}
 8005126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800512a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800512e:	e7f7      	b.n	8005120 <memmove+0x24>

08005130 <_sbrk_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	2300      	movs	r3, #0
 8005134:	4d05      	ldr	r5, [pc, #20]	@ (800514c <_sbrk_r+0x1c>)
 8005136:	4604      	mov	r4, r0
 8005138:	4608      	mov	r0, r1
 800513a:	602b      	str	r3, [r5, #0]
 800513c:	f7fc fc0e 	bl	800195c <_sbrk>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	d102      	bne.n	800514a <_sbrk_r+0x1a>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	b103      	cbz	r3, 800514a <_sbrk_r+0x1a>
 8005148:	6023      	str	r3, [r4, #0]
 800514a:	bd38      	pop	{r3, r4, r5, pc}
 800514c:	200002c4 	.word	0x200002c4

08005150 <memchr>:
 8005150:	4603      	mov	r3, r0
 8005152:	b510      	push	{r4, lr}
 8005154:	b2c9      	uxtb	r1, r1
 8005156:	4402      	add	r2, r0
 8005158:	4293      	cmp	r3, r2
 800515a:	4618      	mov	r0, r3
 800515c:	d101      	bne.n	8005162 <memchr+0x12>
 800515e:	2000      	movs	r0, #0
 8005160:	e003      	b.n	800516a <memchr+0x1a>
 8005162:	7804      	ldrb	r4, [r0, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	428c      	cmp	r4, r1
 8005168:	d1f6      	bne.n	8005158 <memchr+0x8>
 800516a:	bd10      	pop	{r4, pc}

0800516c <memcpy>:
 800516c:	440a      	add	r2, r1
 800516e:	4291      	cmp	r1, r2
 8005170:	f100 33ff 	add.w	r3, r0, #4294967295
 8005174:	d100      	bne.n	8005178 <memcpy+0xc>
 8005176:	4770      	bx	lr
 8005178:	b510      	push	{r4, lr}
 800517a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800517e:	4291      	cmp	r1, r2
 8005180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005184:	d1f9      	bne.n	800517a <memcpy+0xe>
 8005186:	bd10      	pop	{r4, pc}

08005188 <_realloc_r>:
 8005188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518c:	4607      	mov	r7, r0
 800518e:	4614      	mov	r4, r2
 8005190:	460d      	mov	r5, r1
 8005192:	b921      	cbnz	r1, 800519e <_realloc_r+0x16>
 8005194:	4611      	mov	r1, r2
 8005196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800519a:	f7ff bc3b 	b.w	8004a14 <_malloc_r>
 800519e:	b92a      	cbnz	r2, 80051ac <_realloc_r+0x24>
 80051a0:	f7ff fbce 	bl	8004940 <_free_r>
 80051a4:	4625      	mov	r5, r4
 80051a6:	4628      	mov	r0, r5
 80051a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ac:	f000 f81a 	bl	80051e4 <_malloc_usable_size_r>
 80051b0:	4284      	cmp	r4, r0
 80051b2:	4606      	mov	r6, r0
 80051b4:	d802      	bhi.n	80051bc <_realloc_r+0x34>
 80051b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051ba:	d8f4      	bhi.n	80051a6 <_realloc_r+0x1e>
 80051bc:	4621      	mov	r1, r4
 80051be:	4638      	mov	r0, r7
 80051c0:	f7ff fc28 	bl	8004a14 <_malloc_r>
 80051c4:	4680      	mov	r8, r0
 80051c6:	b908      	cbnz	r0, 80051cc <_realloc_r+0x44>
 80051c8:	4645      	mov	r5, r8
 80051ca:	e7ec      	b.n	80051a6 <_realloc_r+0x1e>
 80051cc:	42b4      	cmp	r4, r6
 80051ce:	4622      	mov	r2, r4
 80051d0:	4629      	mov	r1, r5
 80051d2:	bf28      	it	cs
 80051d4:	4632      	movcs	r2, r6
 80051d6:	f7ff ffc9 	bl	800516c <memcpy>
 80051da:	4629      	mov	r1, r5
 80051dc:	4638      	mov	r0, r7
 80051de:	f7ff fbaf 	bl	8004940 <_free_r>
 80051e2:	e7f1      	b.n	80051c8 <_realloc_r+0x40>

080051e4 <_malloc_usable_size_r>:
 80051e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e8:	1f18      	subs	r0, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bfbc      	itt	lt
 80051ee:	580b      	ldrlt	r3, [r1, r0]
 80051f0:	18c0      	addlt	r0, r0, r3
 80051f2:	4770      	bx	lr

080051f4 <fmaxf>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4604      	mov	r4, r0
 80051f8:	460d      	mov	r5, r1
 80051fa:	f000 f811 	bl	8005220 <__fpclassifyf>
 80051fe:	b910      	cbnz	r0, 8005206 <fmaxf+0x12>
 8005200:	462c      	mov	r4, r5
 8005202:	4620      	mov	r0, r4
 8005204:	bd38      	pop	{r3, r4, r5, pc}
 8005206:	4628      	mov	r0, r5
 8005208:	f000 f80a 	bl	8005220 <__fpclassifyf>
 800520c:	2800      	cmp	r0, #0
 800520e:	d0f8      	beq.n	8005202 <fmaxf+0xe>
 8005210:	4629      	mov	r1, r5
 8005212:	4620      	mov	r0, r4
 8005214:	f7fb fa64 	bl	80006e0 <__aeabi_fcmpgt>
 8005218:	2800      	cmp	r0, #0
 800521a:	d0f1      	beq.n	8005200 <fmaxf+0xc>
 800521c:	e7f1      	b.n	8005202 <fmaxf+0xe>
	...

08005220 <__fpclassifyf>:
 8005220:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8005224:	d00d      	beq.n	8005242 <__fpclassifyf+0x22>
 8005226:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800522a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800522e:	d30a      	bcc.n	8005246 <__fpclassifyf+0x26>
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <__fpclassifyf+0x30>)
 8005232:	1e42      	subs	r2, r0, #1
 8005234:	429a      	cmp	r2, r3
 8005236:	d908      	bls.n	800524a <__fpclassifyf+0x2a>
 8005238:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800523c:	4258      	negs	r0, r3
 800523e:	4158      	adcs	r0, r3
 8005240:	4770      	bx	lr
 8005242:	2002      	movs	r0, #2
 8005244:	4770      	bx	lr
 8005246:	2004      	movs	r0, #4
 8005248:	4770      	bx	lr
 800524a:	2003      	movs	r0, #3
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	007ffffe 	.word	0x007ffffe

08005254 <_init>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	bf00      	nop
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr

08005260 <_fini>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr
